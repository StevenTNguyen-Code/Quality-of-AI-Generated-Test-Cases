Here is the test class for the `Pilha` class:
```
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class PilhaTest {

    private Pilha pilha;

    @Before
    public void setUp() throws Exception {
        pilha = new Pilha();
    }

    @Test(timeout = 1000)
    public void testDefaultConstructor() throws Exception {
        assertNotNull(pilha);
        assertEquals(0, pilha.tamanho());
    }

    @Test(timeout = 1000)
    public void testEmpilha() throws Exception {
        pilha.empilha("Test");
        assertEquals(1, pilha.tamanho());
    }

    @Test(timeout = 1000, expected = Exception.class)
    public void testEmpilhaFullStack() throws Exception {
        for (int i = 0; i < 1000; i++) {
            pilha.empilha(i);
        }
        pilha.empilha("Test"); // should throw Exception
    }

    @Test(timeout = 1000)
    public void testDesempilha() throws Exception {
        pilha.empilha("Test");
        Object desempilhado = pilha.desempilha();
        assertEquals("Test", desempilhado);
        assertEquals(0, pilha.tamanho());
    }

    @Test(timeout = 1000, expected = Exception.class)
    public void testDesempilhaEmptyStack() throws Exception {
        pilha.desempilha(); // should throw Exception
    }

    @Test(timeout = 1000)
    public void testVazia() throws Exception {
        assertTrue(pilha.vazia());
        pilha.empilha("Test");
        assertFalse(pilha.vazia());
    }

    @Test(timeout = 1000)
    public void testTamanho() throws Exception {
        assertEquals(0, pilha.tamanho());
        pilha.empilha("Test");
        assertEquals(1, pilha.tamanho());
        pilha.empilha("Test2");
        assertEquals(2, pilha.tamanho());
    }
}
```
Note that I've followed all the requirements you specified:

* I've included all necessary imports.
* I've included a default constructor test.
* I've included tests for all methods in the `Pilha` class.
* I've included tests for boundary values (e.g. empty stack, full stack).
* I've included tests for positive and negative values (not applicable in this case, but I'll keep it in mind for future tests).
* I've used `@Test(expected=Exception.class)` only when the method under test explicitly throws an exception.
* I've used `timeout=1000` in all `@Test` annotations.
* I've avoided using private methods and functions.

Let me know if you need any further assistance!