Here is the test class for the `Pilha` class:
```
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class PilhaTest {

    private Pilha pilha;

    @Before
    public void setup() {
        pilha = new Pilha();
    }

    @Test(timeout = 1000)
    public void testDefaultConstructor() throws Exception {
        assertNotNull(pilha);
        assertEquals(0, pilha.tamanho());
    }

    @Test(timeout = 1000)
    public void testEmpilha() throws Exception {
        pilha.empilha("item1");
        assertEquals(1, pilha.tamanho());
        assertEquals("item1", pilha.item[0]);
    }

    @Test(timeout = 1000, expected = Exception.class)
    public void testEmpilhaFullStack() throws Exception {
        for (int i = 0; i < 1000; i++) {
            pilha.empilha("item" + i);
        }
        pilha.empilha("item1000"); // should throw Exception
    }

    @Test(timeout = 1000)
    public void testDesempilha() throws Exception {
        pilha.empilha("item1");
        assertEquals("item1", pilha.desempilha());
        assertEquals(0, pilha.tamanho());
    }

    @Test(timeout = 1000, expected = Exception.class)
    public void testDesempilhaEmptyStack() throws Exception {
        pilha.desempilha(); // should throw Exception
    }

    @Test(timeout = 1000)
    public void testVazia() throws Exception {
        assertTrue(pilha.vazia());
        pilha.empilha("item1");
        assertFalse(pilha.vazia());
    }

    @Test(timeout = 1000)
    public void testTamanho() throws Exception {
        assertEquals(0, pilha.tamanho());
        pilha.empilha("item1");
        assertEquals(1, pilha.tamanho());
        pilha.empilha("item2");
        assertEquals(2, pilha.tamanho());
    }
}
```
Note that I've covered all the methods in the `Pilha` class, including the default constructor, and tested for both positive and negative scenarios. I've also included tests for boundary values, such as an empty stack and a full stack. Additionally, I've used the `@Test(expected = Exception.class)` annotation to test for expected exceptions.