Sure, I will create a set of JUnit 4 test cases for the `Ordenacao` class. These tests will cover all decisions, boundary values, and will include necessary imports and annotations as specified.

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class OrdenacaoTest {

    private Ordenacao ordenacao;

    @Before
    public void setUp() {
        ordenacao = new Ordenacao();
    }

    @Test(timeout=1000)
    public void testMergeSortWithEmptyArray() throws Exception {
        int[] array = {};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(new int[]{}, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithSingleElementArray() throws Exception {
        int[] array = {1};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(new int[]{1}, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithTwoElementsArray() throws Exception {
        int[] array = {2, 1};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(new int[]{1, 2}, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithSortedArray() throws Exception {
        int[] array = {1, 2, 3, 4, 5};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(new int[]{1, 2, 3, 4, 5}, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithUnsortedArray() throws Exception {
        int[] array = {5, 4, 3, 2, 1};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(new int[]{1, 2, 3, 4, 5}, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithNegativeNumbers() throws Exception {
        int[] array = {-3, -1, -2, -5, -4};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(new int[]{-5, -4, -3, -2, -1}, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithMixedNumbers() throws Exception {
        int[] array = {3, -1, 2, -5, 4};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(new int[]{-5, -1, 2, 3, 4}, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithDuplicateNumbers() throws Exception {
        int[] array = {3, 1, 2, 1, 3};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(new int[]{1, 1, 2, 3, 3}, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithBoundaryValues() throws Exception {
        int[] array = {Integer.MAX_VALUE, Integer.MIN_VALUE, 0};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(new int[]{Integer.MIN_VALUE, 0, Integer.MAX_VALUE}, array);
    }
}
```

### Explanation:
1. **Imports and Setup**: The necessary imports are included, and a `setUp` method initializes the `Ordenacao` object.
2. **Test Cases**:
   - **Empty Array**: Tests sorting an empty array.
   - **Single Element Array**: Tests sorting an array with one element.
   - **Two Elements Array**: Tests sorting an array with two elements.
   - **Sorted Array**: Tests sorting an already sorted array.
   - **Unsorted Array**: Tests sorting an unsorted array.
   - **Negative Numbers**: Tests sorting an array with negative numbers.
   - **Mixed Numbers**: Tests sorting an array with both positive and negative numbers.
   - **Duplicate Numbers**: Tests sorting an array with duplicate numbers.
   - **Boundary Values**: Tests sorting an array with boundary values (`Integer.MAX_VALUE` and `Integer.MIN_VALUE`).

Each test method includes the `timeout=1000` annotation and throws `Exception` as required. The tests cover all decisions and boundary values, ensuring comprehensive coverage of the `mergeSort` method.