Sure, I can help you create unit tests for the `Ordenacao` class using JUnit 4. Below is the test class that covers all the requirements specified in your prompt:

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class OrdenacaoTest {

    private int[] array;

    @Before
    public void setUp() {
        array = new int[]{5, 3, 8, 4, 2, 7, 1, 6};
    }

    @Test(timeout = 1000)
    public void testMergeSortWithPositiveValues() throws Exception {
        int[] expected = {1, 2, 3, 4, 5, 6, 7, 8};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(expected, array);
    }

    @Test(timeout = 1000)
    public void testMergeSortWithNegativeValues() throws Exception {
        int[] arrayWithNegatives = {5, -3, 8, -4, 2, -7, 1, -6};
        int[] expected = {-7, -6, -4, -3, 1, 2, 5, 8};
        Ordenacao.mergeSort(arrayWithNegatives, 0, arrayWithNegatives.length - 1);
        assertArrayEquals(expected, arrayWithNegatives);
    }

    @Test(timeout = 1000)
    public void testMergeSortWithSingleElement() throws Exception {
        int[] singleElementArray = {1};
        int[] expected = {1};
        Ordenacao.mergeSort(singleElementArray, 0, singleElementArray.length - 1);
        assertArrayEquals(expected, singleElementArray);
    }

    @Test(timeout = 1000)
    public void testMergeSortWithEmptyArray() throws Exception {
        int[] emptyArray = {};
        int[] expected = {};
        Ordenacao.mergeSort(emptyArray, 0, emptyArray.length - 1);
        assertArrayEquals(expected, emptyArray);
    }

    @Test(timeout = 1000)
    public void testMergeSortWithAlreadySortedArray() throws Exception {
        int[] sortedArray = {1, 2, 3, 4, 5, 6, 7, 8};
        int[] expected = {1, 2, 3, 4, 5, 6, 7, 8};
        Ordenacao.mergeSort(sortedArray, 0, sortedArray.length - 1);
        assertArrayEquals(expected, sortedArray);
    }

    @Test(timeout = 1000)
    public void testMergeSortWithReverseSortedArray() throws Exception {
        int[] reverseSortedArray = {8, 7, 6, 5, 4, 3, 2, 1};
        int[] expected = {1, 2, 3, 4, 5, 6, 7, 8};
        Ordenacao.mergeSort(reverseSortedArray, 0, reverseSortedArray.length - 1);
        assertArrayEquals(expected, reverseSortedArray);
    }

    @Test(timeout = 1000)
    public void testMergeSortWithDuplicateValues() throws Exception {
        int[] arrayWithDuplicates = {5, 3, 8, 4, 2, 7, 1, 6, 3, 5};
        int[] expected = {1, 2, 3, 3, 4, 5, 5, 6, 7, 8};
        Ordenacao.mergeSort(arrayWithDuplicates, 0, arrayWithDuplicates.length - 1);
        assertArrayEquals(expected, arrayWithDuplicates);
    }

    @Test(timeout = 1000)
    public void testMergeSortWithBoundaryValues() throws Exception {
        int[] boundaryArray = {Integer.MAX_VALUE, Integer.MIN_VALUE, 0};
        int[] expected = {Integer.MIN_VALUE, 0, Integer.MAX_VALUE};
        Ordenacao.mergeSort(boundaryArray, 0, boundaryArray.length - 1);
        assertArrayEquals(expected, boundaryArray);
    }
}
```

### Explanation:
1. **Imports and Package**: The necessary imports and package declaration are included at the top.
2. **Setup Method**: The `setUp` method initializes an array that will be used in multiple test cases.
3. **Test Cases**:
   - **Positive Values**: Tests sorting of an array with positive integers.
   - **Negative Values**: Tests sorting of an array with both positive and negative integers.
   - **Single Element**: Tests sorting of an array with a single element.
   - **Empty Array**: Tests sorting of an empty array.
   - **Already Sorted Array**: Tests sorting of an already sorted array.
   - **Reverse Sorted Array**: Tests sorting of a reverse sorted array.
   - **Duplicate Values**: Tests sorting of an array with duplicate values.
   - **Boundary Values**: Tests sorting of an array with boundary values (`Integer.MAX_VALUE` and `Integer.MIN_VALUE`).

Each test method includes the `timeout = 1000` parameter in the `@Test` annotation and throws `Exception` as required. The `assertArrayEquals` method is used to verify that the sorted array matches the expected result.