Certainly, below is the Java Unit Tests code for the provided class `Ordenacao` according to the given requirements:

```java
package ds;

import org.junit.Test;
import org.junit.Before;

import static org.junit.Assert.*;

public class OrdenacaoTest {

    private Ordenacao ordenacao;

    @Before
    public void setUp() {
        ordenacao = new Ordenacao();
    }

    @Test(timeout = 1000)
    public void testDefaultConstructor() throws Exception {
        assertNotNull(new Ordenacao());
    }

    @Test(timeout = 1000)
    public void testOrdenaEmptyArray() throws Exception {
        int[] array = {};
        Ordenacao.ordena(array, array.length);
        assertArrayEquals(new int[]{}, array);
    }

    @Test(timeout = 1000)
    public void testOrdenaSingleElement() throws Exception {
        int[] array = {1};
        Ordenacao.ordena(array, array.length);
        assertArrayEquals(new int[]{1}, array);
    }

    @Test(timeout = 1000)
    public void testOrdenaTwoElements() throws Exception {
        int[] array = {2, 1};
        Ordenacao.ordena(array, array.length);
        assertArrayEquals(new int[]{1, 2}, array);
    }

    @Test(timeout = 1000)
    public void testOrdenaSortedArray() throws Exception {
        int[] array = {1, 2, 3, 4, 5};
        Ordenacao.ordena(array, array.length);
        assertArrayEquals(new int[]{1, 2, 3, 4, 5}, array);
    }

    @Test(timeout = 1000)
    public void testOrdenaReverseSortedArray() throws Exception {
        int[] array = {5, 4, 3, 2, 1};
        Ordenacao.ordena(array, array.length);
        assertArrayEquals(new int[]{1, 2, 3, 4, 5}, array);
    }

    @Test(timeout = 1000)
    public void testOrdenaUnsortedArray() throws Exception {
        int[] array = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};
        Ordenacao.ordena(array, array.length);
        assertArrayEquals(new int[]{1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9}, array);
    }

    @Test(timeout = 1000)
    public void testOrdenaArrayWithNegativeValues() throws Exception {
        int[] array = {-1, -3, -2, 5, 3, 0, -5};
        Ordenacao.ordena(array, array.length);
        assertArrayEquals(new int[]{-5, -3, -2, -1, 0, 3, 5}, array);
    }

    @Test(timeout = 1000)
    public void testOrdenaMixedArray() throws Exception {
        int[] array = {0, Integer.MAX_VALUE, Integer.MIN_VALUE, 5, -5, 3};
        Ordenacao.ordena(array, array.length);
        assertArrayEquals(new int[]{Integer.MIN_VALUE, -5, 0, 3, 5, Integer.MAX_VALUE}, array);
    }
}
```

### Explanation
1. **Test Setup**: `@Before` method initializes the `ordenacao` object before each test.
2. **Default Constructor**: Tests the default constructor to ensure it can be instantiated.
3. **Empty Array**: Tests sorting an empty array.
4. **Single Element**: Tests sorting an array with one element.
5. **Two Elements**: Tests sorting a small array with two elements (boundary condition).
6. **Sorted Array**: Tests an already sorted array.
7. **Reverse Sorted Array**: Tests a reverse sorted array.
8. **Unsorted Array**: Tests a general unsorted array.
9. **Array with Negative Values**: Tests an array containing negative numbers.
10. **Mixed Array**: Tests an array containing a mix of positive, negative, and boundary numeric values (`Integer.MAX_VALUE` and `Integer.MIN_VALUE`).

Each test has the `timeout = 1000` as required and throws `Exception` as specified in the prompt.