Certainly! Below is the test class for the `Ordenacao` class using JUnit 4 framework in Java 8. The test cases cover all decisions, include boundary values, and meet all specified requirements.

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class OrdenacaoTest {

    private Ordenacao ordenacao;

    @Before
    public void setUp() {
        ordenacao = new Ordenacao();
    }

    @Test(timeout = 1000)
    public void testDefaultConstructor() throws Exception {
        assertNotNull(ordenacao);
    }

    @Test(timeout = 1000)
    public void testOrdenaEmptyArray() throws Exception {
        int[] v = new int[0];
        Ordenacao.ordena(v, 0);
        assertArrayEquals(new int[0], v);
    }

    @Test(timeout = 1000)
    public void testOrdenaSingleElementArray() throws Exception {
        int[] v = {1};
        Ordenacao.ordena(v, 1);
        assertArrayEquals(new int[]{1}, v);
    }

    @Test(timeout = 1000)
    public void testOrdenaTwoElementsSortedArray() throws Exception {
        int[] v = {1, 2};
        Ordenacao.ordena(v, 2);
        assertArrayEquals(new int[]{1, 2}, v);
    }

    @Test(timeout = 1000)
    public void testOrdenaTwoElementsUnsortedArray() throws Exception {
        int[] v = {2, 1};
        Ordenacao.ordena(v, 2);
        assertArrayEquals(new int[]{1, 2}, v);
    }

    @Test(timeout = 1000)
    public void testOrdenaMultipleElementsArray() throws Exception {
        int[] v = {5, 3, 8, 6, 2};
        Ordenacao.ordena(v, 5);
        assertArrayEquals(new int[]{2, 3, 5, 6, 8}, v);
    }

    @Test(timeout = 1000)
    public void testOrdenaArrayWithNegativeValues() throws Exception {
        int[] v = {-1, -3, -2, -4};
        Ordenacao.ordena(v, 4);
        assertArrayEquals(new int[]{-4, -3, -2, -1}, v);
    }

    @Test(timeout = 1000)
    public void testOrdenaArrayWithMixedValues() throws Exception {
        int[] v = {3, -1, 2, -4, 0};
        Ordenacao.ordena(v, 5);
        assertArrayEquals(new int[]{-4, -1, 0, 2, 3}, v);
    }

    @Test(timeout = 1000)
    public void testOrdenaArrayWithDuplicateValues() throws Exception {
        int[] v = {4, 2, 4, 1, 1};
        Ordenacao.ordena(v, 5);
        assertArrayEquals(new int[]{1, 1, 2, 4, 4}, v);
    }

    @Test(timeout = 1000)
    public void testOrdenaAlreadySortedArray() throws Exception {
        int[] v = {1, 2, 3, 4, 5};
        Ordenacao.ordena(v, 5);
        assertArrayEquals(new int[]{1, 2, 3, 4, 5}, v);
    }

    @Test(timeout = 1000)
    public void testOrdenaReverseSortedArray() throws Exception {
        int[] v = {5, 4, 3, 2, 1};
        Ordenacao.ordena(v, 5);
        assertArrayEquals(new int[]{1, 2, 3, 4, 5}, v);
    }
}
```

### Explanation

1. **Default Constructor Test**: Ensures the default constructor initializes the `Ordenacao` object.
2. **Boundary Tests**:
   - Empty array.
   - Single element array.
3. **Decision Coverage**:
   - Two elements sorted/unsorted.
   - Multiple elements.
   - Arrays with negative values.
   - Arrays with mixed positive/negative values.
   - Arrays with duplicate values.
   - Already sorted array.
   - Reverse sorted array.
4. **Timeout**: Each test method has a `timeout=1000` to ensure the test completes within 1 second.

These tests should compile and run successfully, providing full coverage as specified.