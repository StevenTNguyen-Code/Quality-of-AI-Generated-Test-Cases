Certainly! Below is a set of JUnit 4 test cases for the `Ordenacao` class, following the given requirements.

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class OrdenacaoTest {

    private Ordenacao ordenacao;

    @Before
    public void setUp() {
        ordenacao = new Ordenacao();
    }

    @Test(timeout=1000)
    public void testDefaultConstructor() throws Exception {
        assertNotNull("Constructor should create an object", ordenacao);
    }

    @Test(timeout=1000)
    public void testOrdenaEmptyArray() throws Exception {
        int[] v = {};
        Ordenacao.ordena(v, v.length);
        assertArrayEquals(new int[]{}, v);
    }

    @Test(timeout=1000)
    public void testOrdenaSingleElementArray() throws Exception {
        int[] v = {1};
        Ordenacao.ordena(v, v.length);
        assertArrayEquals(new int[]{1}, v);
    }

    @Test(timeout=1000)
    public void testOrdenaSortedArray() throws Exception {
        int[] v = {1, 2, 3, 4, 5};
        Ordenacao.ordena(v, v.length);
        assertArrayEquals(new int[]{1, 2, 3, 4, 5}, v);
    }

    @Test(timeout=1000)
    public void testOrdenaReverseSortedArray() throws Exception {
        int[] v = {5, 4, 3, 2, 1};
        Ordenacao.ordena(v, v.length);
        assertArrayEquals(new int[]{1, 2, 3, 4, 5}, v);
    }

    @Test(timeout=1000)
    public void testOrdenaUnsortedArray() throws Exception {
        int[] v = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};
        Ordenacao.ordena(v, v.length);
        assertArrayEquals(new int[]{1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9}, v);
    }

    @Test(timeout=1000)
    public void testOrdenaArrayWithNegativeNumbers() throws Exception {
        int[] v = {-3, -1, -4, -1, -5, -9, -2, -6, -5, -3, -5};
        Ordenacao.ordena(v, v.length);
        assertArrayEquals(new int[]{-9, -6, -5, -5, -5, -4, -3, -3, -2, -1, -1}, v);
    }

    @Test(timeout=1000)
    public void testOrdenaMixedNumbers() throws Exception {
        int[] v = {3, -1, 4, -1, 5, -9, 2, -6, 5, -3, 5};
        Ordenacao.ordena(v, v.length);
        assertArrayEquals(new int[]{-9, -6, -3, -1, -1, 2, 3, 4, 5, 5, 5}, v);
    }

    @Test(timeout=1000)
    public void testOrdenaArrayWithDuplicates() throws Exception {
        int[] v = {1, 2, 2, 1, 3, 3, 1};
        Ordenacao.ordena(v, v.length);
        assertArrayEquals(new int[]{1, 1, 1, 2, 2, 3, 3}, v);
    }

    @Test(timeout=1000)
    public void testOrdenaBoundaryValues() throws Exception {
        int[] v = {Integer.MAX_VALUE, Integer.MIN_VALUE, 0, -1, 1};
        Ordenacao.ordena(v, v.length);
        assertArrayEquals(new int[]{Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE}, v);
    }
}
```

### Explanation:
1. **Default Constructor Test**: Ensures that the `Ordenacao` object is created successfully.
2. **Empty Array Test**: Tests the sorting of an empty array.
3. **Single Element Array Test**: Tests the sorting of an array with a single element.
4. **Sorted Array Test**: Tests the sorting of an already sorted array.
5. **Reverse Sorted Array Test**: Tests the sorting of a reverse sorted array.
6. **Unsorted Array Test**: Tests the sorting of an unsorted array with multiple elements.
7. **Array with Negative Numbers Test**: Tests the sorting of an array containing negative numbers.
8. **Mixed Numbers Test**: Tests the sorting of an array containing both positive and negative numbers.
9. **Array with Duplicates Test**: Tests the sorting of an array containing duplicate values.
10. **Boundary Values Test**: Tests the sorting of an array with boundary values including `Integer.MAX_VALUE` and `Integer.MIN_VALUE`.

Each test case includes the `timeout=1000` parameter and throws `Exception` as required. The tests cover various scenarios, including boundary values and different types of numeric data.