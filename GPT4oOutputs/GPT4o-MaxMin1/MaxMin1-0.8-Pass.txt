Sure, I'll create a set of unit tests for the `MaxMin1` class in the JUnit 4 framework, following your specified requirements.

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class MaxMin1Test {

    private MaxMin1 maxMin1;

    @Before
    public void setUp() {
        maxMin1 = new MaxMin1();
    }

    @Test(timeout=1000)
    public void testMaxMin1WithPositiveValues() throws Exception {
        int[] input = {1, 2, 3, 4, 5};
        int[] expected = {5, 1};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout=1000)
    public void testMaxMin1WithNegativeValues() throws Exception {
        int[] input = {-1, -2, -3, -4, -5};
        int[] expected = {-1, -5};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout=1000)
    public void testMaxMin1WithMixedValues() throws Exception {
        int[] input = {3, -2, 7, 4, -1};
        int[] expected = {7, -2};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout=1000)
    public void testMaxMin1WithSingleValue() throws Exception {
        int[] input = {42};
        int[] expected = {42, 42};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout=1000, expected=ArrayIndexOutOfBoundsException.class)
    public void testMaxMin1WithEmptyArray() throws Exception {
        int[] input = {};
        MaxMin1.maxMin1(input, input.length);
    }

    @Test(timeout=1000)
    public void testMaxMin1WithBoundaryValues() throws Exception {
        int[] input = {Integer.MAX_VALUE, Integer.MIN_VALUE};
        int[] expected = {Integer.MAX_VALUE, Integer.MIN_VALUE};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout=1000)
    public void testDefaultConstructor() throws Exception {
        MaxMin1 defaultMaxMin1 = new MaxMin1();
        assertNotNull(defaultMaxMin1);
    }
}

```

Explanation:
1. I included all necessary imports.
2. Each test method is annotated with `@Test(timeout=1000)`.
3. I created a `setUp` method annotated with `@Before` to initialize the `MaxMin1` object.
4. Tests cover positive values, negative values, mixed values, single value, empty array (expecting an exception), and boundary values.
5. The default constructor is tested to ensure it creates a non-null object.
6. Exception handling is included using `@Test(expected=...)` for the empty array case.
7. Tests validate both max and min results using `assertArrayEquals`.

This should meet all the specified requirements and ensure thorough testing of the `MaxMin1` class.