Certainly! Below is a set of JUnit 4 test cases for the `MaxMin1` class, covering all decisions, boundary values, and ensuring all methods are tested. The tests also include necessary imports and follow the specified constraints.

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class MaxMin1Test {

    private MaxMin1 maxMin1;

    @Before
    public void setUp() {
        maxMin1 = new MaxMin1();
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithPositiveValues() throws Exception {
        int[] input = {1, 2, 3, 4, 5};
        int[] expected = {5, 1};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithNegativeValues() throws Exception {
        int[] input = {-1, -2, -3, -4, -5};
        int[] expected = {-1, -5};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithMixedValues() throws Exception {
        int[] input = {-1, 2, -3, 4, -5};
        int[] expected = {4, -5};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithSingleElement() throws Exception {
        int[] input = {42};
        int[] expected = {42, 42};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithTwoElements() throws Exception {
        int[] input = {42, -42};
        int[] expected = {42, -42};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithDuplicates() throws Exception {
        int[] input = {1, 1, 1, 1, 1};
        int[] expected = {1, 1};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithBoundaryValues() throws Exception {
        int[] input = {Integer.MAX_VALUE, Integer.MIN_VALUE};
        int[] expected = {Integer.MAX_VALUE, Integer.MIN_VALUE};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout = 1000, expected = ArrayIndexOutOfBoundsException.class)
    public void testMaxMin1WithEmptyArray() throws Exception {
        int[] input = {};
        MaxMin1.maxMin1(input, input.length);
    }
}
```

### Explanation:
1. **Imports and Setup**: The necessary imports and setup methods are included.
2. **Test Cases**:
   - **Positive Values**: Tests with an array of positive integers.
   - **Negative Values**: Tests with an array of negative integers.
   - **Mixed Values**: Tests with an array of both positive and negative integers.
   - **Single Element**: Tests with an array containing a single element.
   - **Two Elements**: Tests with an array containing two elements.
   - **Duplicates**: Tests with an array where all elements are the same.
   - **Boundary Values**: Tests with the maximum and minimum integer values.
   - **Empty Array**: Tests with an empty array to ensure it throws an `ArrayIndexOutOfBoundsException`.

Each test is annotated with `@Test(timeout = 1000)` to ensure it completes within the specified time. The test for an empty array uses `@Test(expected = ArrayIndexOutOfBoundsException.class)` to check for the expected exception.