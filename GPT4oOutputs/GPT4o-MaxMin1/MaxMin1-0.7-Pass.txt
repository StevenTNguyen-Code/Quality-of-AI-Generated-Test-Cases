Sure, here are the unit tests for the `MaxMin1` class using JUnit 4 in Java 8, following all the given constraints:

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class MaxMin1Test {

    private MaxMin1 maxMin;
    
    @Before
    public void setUp() throws Exception {
        maxMin = new MaxMin1();
    }

    @Test(timeout = 1000)
    public void testDefaultConstructor() throws Exception {
        assertNotNull("Default constructor should not return null", maxMin);
    }

    @Test(timeout = 1000)
    public void testMaxMin1_AllPositive() throws Exception {
        int[] v = {1, 2, 3, 4, 5};
        int n = v.length;
        int[] result = MaxMin1.maxMin1(v, n);
        assertEquals("Max value should be 5", 5, result[0]);
        assertEquals("Min value should be 1", 1, result[1]);
    }

    @Test(timeout = 1000)
    public void testMaxMin1_AllNegative() throws Exception {
        int[] v = {-1, -2, -3, -4, -5};
        int n = v.length;
        int[] result = MaxMin1.maxMin1(v, n);
        assertEquals("Max value should be -1", -1, result[0]);
        assertEquals("Min value should be -5", -5, result[1]);
    }

    @Test(timeout = 1000)
    public void testMaxMin1_MixedValues() throws Exception {
        int[] v = {-1, 2, -3, 4, -5};
        int n = v.length;
        int[] result = MaxMin1.maxMin1(v, n);
        assertEquals("Max value should be 4", 4, result[0]);
        assertEquals("Min value should be -5", -5, result[1]);
    }

    @Test(timeout = 1000)
    public void testMaxMin1_SingleElement() throws Exception {
        int[] v = {42};
        int n = v.length;
        int[] result = MaxMin1.maxMin1(v, n);
        assertEquals("Max value should be 42", 42, result[0]);
        assertEquals("Min value should be 42", 42, result[1]);
    }

    @Test(timeout = 1000)
    public void testMaxMin1_BoundaryValues() throws Exception {
        int[] v = {Integer.MAX_VALUE, Integer.MIN_VALUE};
        int n = v.length;
        int[] result = MaxMin1.maxMin1(v, n);
        assertEquals("Max value should be Integer.MAX_VALUE", Integer.MAX_VALUE, result[0]);
        assertEquals("Min value should be Integer.MIN_VALUE", Integer.MIN_VALUE, result[1]);
    }

    @Test(timeout = 1000)
    public void testMaxMin1_EmptyArray() throws Exception {
        int[] v = {};
        int n = v.length;
        try {
            MaxMin1.maxMin1(v, n);
            fail("Should throw ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // Expected exception
        }
    }

    @Test(timeout = 1000)
    public void testMaxMin1_NullArray() throws Exception {
        int[] v = null;
        int n = 0;
        try {
            MaxMin1.maxMin1(v, n);
            fail("Should throw NullPointerException");
        } catch (NullPointerException e) {
            // Expected exception
        }
    }
}
```

### Explanation
1. **Setup Method**: The `setUp` method initializes the `MaxMin1` instance.
2. **Default Constructor Test**: Ensures that the default constructor does not return `null`.
3. **Functional Tests**: 
   - Tests with all positive values.
   - Tests with all negative values.
   - Tests with mixed positive and negative values.
   - Tests with a single element array.
   - Tests with boundary values (i.e., `Integer.MAX_VALUE` and `Integer.MIN_VALUE`).
4. **Exception Tests**:
   - Tests with an empty array to check for `ArrayIndexOutOfBoundsException`.
   - Tests with a `null` array to check for `NullPointerException`.

All tests include the `timeout=1000` constraint as required, and exceptions are handled where appropriate.