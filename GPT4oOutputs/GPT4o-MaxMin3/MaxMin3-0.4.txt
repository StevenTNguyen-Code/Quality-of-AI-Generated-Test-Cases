Sure, I'll write the unit tests for the `MaxMin3` class as per your requirements.

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class MaxMin3Test {

    private MaxMin3 maxMin3;

    @Before
    public void setUp() {
        maxMin3 = new MaxMin3();
    }

    @Test(timeout = 1000)
    public void testMaxMin3EvenNumberOfElements() throws Exception {
        int[] v = {1, 3, 5, 7, 9, 11};
        int[] result = MaxMin3.maxMin3(v, 6);
        assertEquals(11, result[0]);
        assertEquals(1, result[1]);
    }

    @Test(timeout = 1000)
    public void testMaxMin3OddNumberOfElements() throws Exception {
        int[] v = {1, 3, 5, 7, 9};
        int[] result = MaxMin3.maxMin3(v, 5);
        assertEquals(9, result[0]);
        assertEquals(1, result[1]);
    }

    @Test(timeout = 1000)
    public void testMaxMin3SingleElement() throws Exception {
        int[] v = {1};
        int[] result = MaxMin3.maxMin3(v, 1);
        assertEquals(1, result[0]);
        assertEquals(1, result[1]);
    }

    @Test(timeout = 1000)
    public void testMaxMin3TwoElements() throws Exception {
        int[] v = {1, 2};
        int[] result = MaxMin3.maxMin3(v, 2);
        assertEquals(2, result[0]);
        assertEquals(1, result[1]);
    }

    @Test(timeout = 1000)
    public void testMaxMin3NegativeValues() throws Exception {
        int[] v = {-1, -3, -5, -7, -9, -11};
        int[] result = MaxMin3.maxMin3(v, 6);
        assertEquals(-1, result[0]);
        assertEquals(-11, result[1]);
    }

    @Test(timeout = 1000)
    public void testMaxMin3MixedValues() throws Exception {
        int[] v = {-1, 3, -5, 7, -9, 11};
        int[] result = MaxMin3.maxMin3(v, 6);
        assertEquals(11, result[0]);
        assertEquals(-9, result[1]);
    }

    @Test(timeout = 1000, expected = ArrayIndexOutOfBoundsException.class)
    public void testMaxMin3EmptyArray() throws Exception {
        int[] v = {};
        MaxMin3.maxMin3(v, 0);
    }

    @Test(timeout = 1000)
    public void testMaxMin3BoundaryValues() throws Exception {
        int[] v = {Integer.MIN_VALUE, Integer.MAX_VALUE};
        int[] result = MaxMin3.maxMin3(v, 2);
        assertEquals(Integer.MAX_VALUE, result[0]);
        assertEquals(Integer.MIN_VALUE, result[1]);
    }
}
```

### Explanation:

1. **Setup**: The `@Before` method initializes the `MaxMin3` instance before each test.
2. **Test Cases**:
   - **Even Number of Elements**: Tests the method with an even number of elements.
   - **Odd Number of Elements**: Tests the method with an odd number of elements.
   - **Single Element**: Tests the method with only one element.
   - **Two Elements**: Tests the method with two elements.
   - **Negative Values**: Tests the method with negative values.
   - **Mixed Values**: Tests the method with both positive and negative values.
   - **Empty Array**: Tests the method with an empty array, expecting an `ArrayIndexOutOfBoundsException`.
   - **Boundary Values**: Tests the method with boundary integer values.

Each test case follows the requirements, including the `timeout = 1000` in the `@Test` annotations and throwing exceptions in all test method declarations.