Certainly! Below is the JUnit 4 test class for the `MaxMin3` class, covering all the requirements specified in your prompt.

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class MaxMin3Test {

    private MaxMin3 maxMin3;

    @Before
    public void setUp() {
        maxMin3 = new MaxMin3();
    }

    @Test(timeout = 1000)
    public void testDefaultConstructor() throws Exception {
        assertNotNull(maxMin3);
    }

    @Test(timeout = 1000)
    public void testMaxMin3EvenLength() throws Exception {
        int[] input = {1, 3, 5, 7, 9, 11};
        int[] expected = {11, 1};
        int[] result = MaxMin3.maxMin3(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin3OddLength() throws Exception {
        int[] input = {1, 3, 5, 7, 9};
        int[] expected = {9, 1};
        int[] result = MaxMin3.maxMin3(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin3SingleElement() throws Exception {
        int[] input = {5};
        int[] expected = {5, 5};
        int[] result = MaxMin3.maxMin3(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin3TwoElements() throws Exception {
        int[] input = {5, 3};
        int[] expected = {5, 3};
        int[] result = MaxMin3.maxMin3(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin3NegativeValues() throws Exception {
        int[] input = {-1, -3, -5, -7, -9, -11};
        int[] expected = {-1, -11};
        int[] result = MaxMin3.maxMin3(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin3MixedValues() throws Exception {
        int[] input = {-1, 3, -5, 7, -9, 11};
        int[] expected = {11, -9};
        int[] result = MaxMin3.maxMin3(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin3BoundaryValues() throws Exception {
        int[] input = {Integer.MAX_VALUE, Integer.MIN_VALUE, 0};
        int[] expected = {Integer.MAX_VALUE, Integer.MIN_VALUE};
        int[] result = MaxMin3.maxMin3(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout = 1000, expected = ArrayIndexOutOfBoundsException.class)
    public void testMaxMin3EmptyArray() throws Exception {
        int[] input = {};
        MaxMin3.maxMin3(input, input.length);
    }
}
```

### Explanation:
1. **Imports and Package**: The necessary imports and package declaration are included.
2. **Setup Method**: The `setUp` method initializes the `MaxMin3` object.
3. **Default Constructor Test**: A test to ensure the default constructor works.
4. **Various Test Cases**:
   - **Even Length Array**: Tests an array with an even number of elements.
   - **Odd Length Array**: Tests an array with an odd number of elements.
   - **Single Element Array**: Tests an array with a single element.
   - **Two Elements Array**: Tests an array with exactly two elements.
   - **Negative Values**: Tests an array with all negative values.
   - **Mixed Values**: Tests an array with both positive and negative values.
   - **Boundary Values**: Tests an array with boundary values like `Integer.MAX_VALUE` and `Integer.MIN_VALUE`.
   - **Empty Array**: Tests an empty array which is expected to throw an `ArrayIndexOutOfBoundsException`.

Each test method includes the `timeout = 1000` annotation and throws `Exception` as required. The tests cover all decision points and boundary values.