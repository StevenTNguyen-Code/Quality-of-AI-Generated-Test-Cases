Sure, I can help you create the unit tests for the `Pilha` class according to your specifications. Below are the test cases:

**PilhaTest.java**
```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;
import ds.Pilha;

public class PilhaTest {

    private Pilha pilha;

    @Before
    public void setUp() {
        pilha = new Pilha();
    }

    @Test(timeout=1000)
    public void testPilhaDefaultConstructor() {
        assertNotNull("Pilha object should not be null", pilha);
        assertTrue("Newly created pilha should be empty", pilha.vazia());
        assertEquals(0, pilha.tamanho());
    }

    @Test(timeout=1000)
    public void testEmpilha() throws Exception {
        assertTrue("Pilha should initially be empty", pilha.vazia());

        pilha.empilha("item1");
        assertFalse("Pilha should no longer be empty after empilha", pilha.vazia());
        assertEquals(1, pilha.tamanho());

        pilha.empilha("item2");
        assertEquals(2, pilha.tamanho());
    }

    @Test(timeout=1000, expected=Exception.class)
    public void testEmpilhaException() throws Exception {
        Pilha smallPilha = new Pilha();
        smallPilha.item = new Object[1]; // Limiting the size to 1 for test

        smallPilha.empilha("item1");
        smallPilha.empilha("item2"); // This should throw Exception
    }

    @Test(timeout=1000)
    public void testDesempilha() throws Exception {
        pilha.empilha("item1");
        pilha.empilha("item2");

        Object topItem = pilha.desempilha();
        assertEquals("item2", topItem);
        assertEquals(1, pilha.tamanho());

        topItem = pilha.desempilha();
        assertEquals("item1", topItem);
        assertTrue("Pilha should be empty after desempilha all items", pilha.vazia());
    }

    @Test(timeout=1000, expected=Exception.class)
    public void testDesempilhaException() throws Exception {
        pilha.desempilha(); // This should throw Exception because the stack is empty
    }

    @Test(timeout=1000)
    public void testVazia() throws Exception {
        assertTrue("Newly created pilha should be empty", pilha.vazia());

        pilha.empilha("item");
        assertFalse("Pilha should not be empty after item is pushed", pilha.vazia());

        pilha.desempilha();
        assertTrue("Pilha should be empty after item is popped", pilha.vazia());
    }

    @Test(timeout=1000)
    public void testTamanho() throws Exception {
        assertEquals(0, pilha.tamanho());

        pilha.empilha("item1");
        assertEquals(1, pilha.tamanho());

        pilha.empilha("item2");
        assertEquals(2, pilha.tamanho());

        pilha.desempilha();
        assertEquals(1, pilha.tamanho());

        pilha.desempilha();
        assertEquals(0, pilha.tamanho());
    }
}
```

### Explanation:

1. **Default Constructor**: The `testPilhaDefaultConstructor()` test verifies that the `Pilha` object is created correctly and is initially empty.
2. **`empilha` Method**:
    - `testEmpilha()` checks normal functionality by adding items and ensuring the size updates correctly.
    - `testEmpilhaException()` verifies exception handling when the stack is full.
3. **`desempilha` Method**:
    - `testDesempilha()` checks normal functionality by removing items and ensuring the size updates correctly.
    - `testDesempilhaException()` validates exception handling when attempting to pop from an empty stack.
4. **`vazia` Method**: `testVazia()` checks the stack's empty status before and after push/pop operations.
5. **`tamanho` Method**: `testTamanho()` verifies the method that returns the stack's size, ensuring it updates correctly after push and pop operations.

These tests follow your requirements comprehensively, ensuring all paths and boundary conditions are tested and exceptions are validated appropriately.