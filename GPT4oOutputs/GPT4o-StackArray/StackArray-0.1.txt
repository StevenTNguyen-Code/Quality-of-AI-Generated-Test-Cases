Sure, here are the unit tests for the `Pilha` class using JUnit 4:

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class PilhaTest {

    private Pilha pilha;

    @Before
    public void setUp() {
        pilha = new Pilha();
    }

    @Test(timeout=1000)
    public void testDefaultConstructor() {
        assertNotNull(pilha);
        assertEquals(0, pilha.tamanho());
        assertTrue(pilha.vazia());
    }

    @Test(timeout=1000)
    public void testEmpilha() throws Exception {
        pilha.empilha("item1");
        assertEquals(1, pilha.tamanho());
        assertFalse(pilha.vazia());
    }

    @Test(timeout=1000, expected=Exception.class)
    public void testEmpilhaException() throws Exception {
        for (int i = 0; i < 1000; i++) {
            pilha.empilha("item" + i);
        }
        pilha.empilha("item1000"); // This should throw an exception
    }

    @Test(timeout=1000)
    public void testDesempilha() throws Exception {
        pilha.empilha("item1");
        Object item = pilha.desempilha();
        assertEquals("item1", item);
        assertTrue(pilha.vazia());
    }

    @Test(timeout=1000, expected=Exception.class)
    public void testDesempilhaException() throws Exception {
        pilha.desempilha(); // This should throw an exception
    }

    @Test(timeout=1000)
    public void testVaziaTrue() {
        assertTrue(pilha.vazia());
    }

    @Test(timeout=1000)
    public void testVaziaFalse() throws Exception {
        pilha.empilha("item1");
        assertFalse(pilha.vazia());
    }

    @Test(timeout=1000)
    public void testTamanho() throws Exception {
        assertEquals(0, pilha.tamanho());
        pilha.empilha("item1");
        assertEquals(1, pilha.tamanho());
        pilha.desempilha();
        assertEquals(0, pilha.tamanho());
    }
}
```

### Explanation:

1. **Default Constructor Test**:
   - `testDefaultConstructor`: Ensures that the default constructor initializes the stack correctly.

2. **Empilha Method Tests**:
   - `testEmpilha`: Tests the normal functionality of the `empilha` method.
   - `testEmpilhaException`: Tests the boundary condition where the stack is full and an exception should be thrown.

3. **Desempilha Method Tests**:
   - `testDesempilha`: Tests the normal functionality of the `desempilha` method.
   - `testDesempilhaException`: Tests the boundary condition where the stack is empty and an exception should be thrown.

4. **Vazia Method Tests**:
   - `testVaziaTrue`: Tests the `vazia` method when the stack is empty.
   - `testVaziaFalse`: Tests the `vazia` method when the stack is not empty.

5. **Tamanho Method Test**:
   - `testTamanho`: Tests the `tamanho` method to ensure it returns the correct size of the stack.

Each test method includes the `timeout=1000` parameter to ensure that the test completes within 1000 milliseconds. The tests also cover both true and false conditions for all conditional expressions and include boundary value tests for numeric data.