```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class PilhaTest {

    private Pilha pilha;

    @Before
    public void setUp() {
        pilha = new Pilha();
    }

    @Test(timeout = 1000)
    public void testDefaultConstructor() {
        assertNotNull(pilha);
        assertEquals(0, pilha.tamanho());
        assertTrue(pilha.vazia());
    }

    @Test(timeout = 1000)
    public void testEmpilha() throws Exception {
        pilha.empilha("item1");
        assertEquals(1, pilha.tamanho());
        assertFalse(pilha.vazia());
    }

    @Test(timeout = 1000, expected = Exception.class)
    public void testEmpilhaException() throws Exception {
        for (int i = 0; i < 1000; i++) {
            pilha.empilha("item" + i);
        }
        pilha.empilha("overflow"); // This should throw an exception
    }

    @Test(timeout = 1000)
    public void testDesempilha() throws Exception {
        pilha.empilha("item1");
        Object item = pilha.desempilha();
        assertEquals("item1", item);
        assertTrue(pilha.vazia());
    }

    @Test(timeout = 1000, expected = Exception.class)
    public void testDesempilhaException() throws Exception {
        pilha.desempilha(); // This should throw an exception
    }

    @Test(timeout = 1000)
    public void testVazia() {
        assertTrue(pilha.vazia());
        pilha.topo = 1; // Directly manipulate for boundary test
        assertFalse(pilha.vazia());
    }

    @Test(timeout = 1000)
    public void testTamanho() {
        assertEquals(0, pilha.tamanho());
        pilha.topo = 1; // Directly manipulate for boundary test
        assertEquals(1, pilha.tamanho());
    }
}
```

### Explanation:
1. **Imports and Package**: The necessary imports and package declaration are included at the top.
2. **Setup Method**: The `setUp` method initializes a new `Pilha` object before each test.
3. **Default Constructor Test**: Verifies the default constructor initializes the stack correctly.
4. **Empilha Tests**:
   - **Normal Case**: Tests adding an item to the stack.
   - **Exception Case**: Tests the exception when trying to add an item to a full stack.
5. **Desempilha Tests**:
   - **Normal Case**: Tests removing an item from the stack.
   - **Exception Case**: Tests the exception when trying to remove an item from an empty stack.
6. **Vazia Test**: Tests the `vazia` method for both true and false conditions.
7. **Tamanho Test**: Tests the `tamanho` method for boundary values.

Each test method includes `timeout = 1000` to ensure it completes within 1 second. The exception tests use `expected = Exception.class` to verify that the correct exceptions are thrown.