```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class CasamentoExatoTest {

    private CasamentoExato casamentoExato;

    @Before
    public void setUp() {
        casamentoExato = new CasamentoExato();
    }

    @Test(timeout = 1000)
    public void testForcaBruta() throws Exception {
        // Test with matching pattern
        CasamentoExato.forcaBruta("abcde", 5, "bcd", 3);
        // Test with non-matching pattern
        CasamentoExato.forcaBruta("abcde", 5, "xyz", 3);
        // Test with pattern at the beginning
        CasamentoExato.forcaBruta("abcde", 5, "abc", 3);
        // Test with pattern at the end
        CasamentoExato.forcaBruta("abcde", 5, "cde", 3);
        // Test with empty pattern
        CasamentoExato.forcaBruta("abcde", 5, "", 0);
        // Test with empty text
        CasamentoExato.forcaBruta("", 0, "abc", 3);
    }

    @Test(timeout = 1000)
    public void testShiftAndExato() throws Exception {
        // Test with matching pattern
        CasamentoExato.shiftAndExato("abcde", 5, "bcd", 3);
        // Test with non-matching pattern
        CasamentoExato.shiftAndExato("abcde", 5, "xyz", 3);
        // Test with pattern at the beginning
        CasamentoExato.shiftAndExato("abcde", 5, "abc", 3);
        // Test with pattern at the end
        CasamentoExato.shiftAndExato("abcde", 5, "cde", 3);
        // Test with empty pattern
        CasamentoExato.shiftAndExato("abcde", 5, "", 0);
        // Test with empty text
        CasamentoExato.shiftAndExato("", 0, "abc", 3);
    }

    @Test(timeout = 1000)
    public void testBmh() throws Exception {
        // Test with matching pattern
        CasamentoExato.bmh("abcde", 5, "bcd", 3);
        // Test with non-matching pattern
        CasamentoExato.bmh("abcde", 5, "xyz", 3);
        // Test with pattern at the beginning
        CasamentoExato.bmh("abcde", 5, "abc", 3);
        // Test with pattern at the end
        CasamentoExato.bmh("abcde", 5, "cde", 3);
        // Test with empty pattern
        CasamentoExato.bmh("abcde", 5, "", 0);
        // Test with empty text
        CasamentoExato.bmh("", 0, "abc", 3);
    }

    @Test(timeout = 1000)
    public void testBmhs() throws Exception {
        // Test with matching pattern
        CasamentoExato.bmhs("abcde", 5, "bcd", 3);
        // Test with non-matching pattern
        CasamentoExato.bmhs("abcde", 5, "xyz", 3);
        // Test with pattern at the beginning
        CasamentoExato.bmhs("abcde", 5, "abc", 3);
        // Test with pattern at the end
        CasamentoExato.bmhs("abcde", 5, "cde", 3);
        // Test with empty pattern
        CasamentoExato.bmhs("abcde", 5, "", 0);
        // Test with empty text
        CasamentoExato.bmhs("", 0, "abc", 3);
    }
}
```

### Explanation:
1. **Setup Method**: The `setUp` method initializes an instance of `CasamentoExato` before each test.
2. **Test Methods**: Each method in `CasamentoExato` has a corresponding test method.
3. **Boundary Values**: Tests include boundary values such as empty strings and patterns.
4. **Positive and Negative Cases**: Tests include cases where patterns match and do not match.
5. **Timeout**: Each test method has a timeout of 1000 milliseconds.
6. **Exception Handling**: All test methods declare `throws Exception` as required.

This ensures comprehensive coverage of the methods in the `CasamentoExato` class.