Here are the unit tests for the `CasamentoExato` class based on your requirements:

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;
import ds.*;

public class CasamentoExatoTest {

    private CasamentoExato casamentoExato;

    @Before
    public void setUp() throws Exception {
        casamentoExato = new CasamentoExato();
    }

    @Test(timeout = 1000)
    public void testForcaBruta() throws Exception {
        String T = "abcde";
        String P = "cd";
        casamentoExato.forcaBruta(T, T.length(), P, P.length());
    }

    @Test(timeout = 1000)
    public void testForcaBrutaNoMatch() throws Exception {
        String T = "abcde";
        String P = "fg";
        casamentoExato.forcaBruta(T, T.length(), P, P.length());
    }

    @Test(timeout = 1000)
    public void testForcaBrutaBoundary() throws Exception {
        String T = "a";
        String P = "a";
        casamentoExato.forcaBruta(T, T.length(), P, P.length());
    }

    @Test(timeout = 1000)
    public void testShiftAndExato() throws Exception {
        String T = "abcde";
        String P = "cd";
        casamentoExato.shiftAndExato(T, T.length(), P, P.length());
    }

    @Test(timeout = 1000)
    public void testShiftAndExatoNoMatch() throws Exception {
        String T = "abcde";
        String P = "fg";
        casamentoExato.shiftAndExato(T, T.length(), P, P.length());
    }

    @Test(timeout = 1000)
    public void testShiftAndExatoBoundary() throws Exception {
        String T = "a";
        String P = "a";
        casamentoExato.shiftAndExato(T, T.length(), P, P.length());
    }

    @Test(timeout = 1000)
    public void testBmh() throws Exception {
        String T = "abcde";
        String P = "cd";
        casamentoExato.bmh(T, T.length(), P, P.length());
    }

    @Test(timeout = 1000)
    public void testBmhNoMatch() throws Exception {
        String T = "abcde";
        String P = "fg";
        casamentoExato.bmh(T, T.length(), P, P.length());
    }

    @Test(timeout = 1000)
    public void testBmhBoundary() throws Exception {
        String T = "a";
        String P = "a";
        casamentoExato.bmh(T, T.length(), P, P.length());
    }

    @Test(timeout = 1000)
    public void testBmhs() throws Exception {
        String T = "abcde";
        String P = "cd";
        casamentoExato.bmhs(T, T.length(), P, P.length());
    }

    @Test(timeout = 1000)
    public void testBmhsNoMatch() throws Exception {
        String T = "abcde";
        String P = "fg";
        casamentoExato.bmhs(T, T.length(), P, P.length());
    }

    @Test(timeout = 1000)
    public void testBmhsBoundary() throws Exception {
        String T = "a";
        String P = "a";
        casamentoExato.bmhs(T, T.length(), P, P.length());
    }

    @Test(timeout = 1000)
    public void testDefaultConstructor() throws Exception {
        CasamentoExato instance = new CasamentoExato();
        assertNotNull(instance);
    }
}
```

### Explanation:
1. **Setup Method**: A `setUp` method is included to initialize the `CasamentoExato` instance before each test.
2. **Test Cases**:
   - Each method (`forcaBruta`, `shiftAndExato`, `bmh`, `bmhs`) is tested with:
     - A normal case where a match is found.
     - A case where no match is found.
     - A boundary case with the smallest possible input.
3. **Default Constructor**: The default constructor is tested to ensure it creates an instance of `CasamentoExato`.
4. **Timeout**: Each test has a timeout of 1000 milliseconds as specified.
5. **Exception Handling**: Each test method declares `throws Exception` to comply with the requirement.

These tests should cover all the requirements mentioned in your prompt.