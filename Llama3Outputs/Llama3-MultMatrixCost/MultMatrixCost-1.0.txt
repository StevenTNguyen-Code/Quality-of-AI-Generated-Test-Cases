Here are the JUnit 4 test cases for the `AvaliaMultMatrizes` class:
```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;
import java.io.IOException;

public class AvaliaMultMatrizesTest {

    private AvaliaMultMatrizes avaliaMultMatrizes;

    @Before
    public void setUp() throws Exception {
        avaliaMultMatrizes = new AvaliaMultMatrizes();
    }

    @Test(timeout = 1000)
    public void testMultmatrize_DefaultConstructor() throws IOException {
        // Test default constructor
        assertNotNull(avaliaMultMatrizes);
    }

    @Test(timeout = 1000)
    public void testMultmatrize_PositiveValues() throws IOException {
        int n = 5;
        int d[] = {1, 2, 3, 4, 5};
        avaliaMultMatrizes.multmatrize(n, d);
        // Verify output (you may want to verify the output of the System.out.print statements)
    }

    @Test(timeout = 1000)
    public void testMultmatrize_NegativeValues() throws IOException {
        int n = -5;
        int d[] = {-1, -2, -3, -4, -5};
        try {
            avaliaMultMatrizes.multmatrize(n, d);
            fail("Expected IOException for negative values");
        } catch (IOException e) {
            // expected
        }
    }

    @Test(timeout = 1000)
    public void testMultmatrize_BoundaryValues() throws IOException {
        int n = 0;
        int d[] = {};
        try {
            avaliaMultMatrizes.multmatrize(n, d);
            fail("Expected IOException for empty array");
        } catch (IOException e) {
            // expected
        }
    }

    @Test(timeout = 1000, expected = IOException.class)
    public void testMultmatrize_NullArray() throws IOException {
        int n = 5;
        int d[] = null;
        avaliaMultMatrizes.multmatrize(n, d);
    }

    @Test(timeout = 1000)
    public void testMultmatrize_LargeArray() throws IOException {
        int n = 100;
        int d[] = new int[n];
        for (int i = 0; i < n; i++) {
            d[i] = i + 1;
        }
        avaliaMultMatrizes.multmatrize(n, d);
        // Verify output (you may want to verify the output of the System.out.print statements)
    }
}
```
Note that I've tested the following scenarios:

1. Default constructor
2. Positive values
3. Negative values (expecting an IOException)
4. Boundary values (empty array, expecting an IOException)
5. Null array (expecting an IOException)
6. Large array

Also, I've included the `expected` keyword in the `@Test` annotation for the test cases that expect an `IOException` to be thrown.