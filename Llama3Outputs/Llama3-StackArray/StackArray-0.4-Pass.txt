Here is the Java unit test class for the Pilha class:
```
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;
import ds.*;

public class PilhaTest {

    private Pilha pilha;

    @Before
    public void setup() throws Exception {
        pilha = new Pilha();
    }

    @Test(timeout=1000)
    public void testDefaultConstructor() throws Exception {
        assertNotNull(pilha);
        assertEquals(0, pilha.tamanho());
    }

    @Test(timeout=1000)
    public void testEmpilha() throws Exception {
        pilha.empilha("item1");
        assertEquals(1, pilha.tamanho());
    }

    @Test(timeout=1000)
    public void testEmpilhaFullStack() throws Exception {
        for (int i = 0; i < 1000; i++) {
            pilha.empilha("item" + i);
        }
        try {
            pilha.empilha("item1001");
            fail("Expected Exception: A pilha esta cheia");
        } catch (Exception e) {
            assertEquals("Erro: A pilha esta cheia", e.getMessage());
        }
    }

    @Test(timeout=1000)
    public void testDesempilha() throws Exception {
        pilha.empilha("item1");
        assertEquals("item1", pilha.desempilha());
        assertEquals(0, pilha.tamanho());
    }

    @Test(timeout=1000, expected=Exception.class)
    public void testDesempilhaEmptyStack() throws Exception {
        pilha.desempilha();
    }

    @Test(timeout=1000)
    public void testVazia() throws Exception {
        assertTrue(pilha.vazia());
        pilha.empilha("item1");
        assertFalse(pilha.vazia());
    }

    @Test(timeout=1000)
    public void testTamanho() throws Exception {
        assertEquals(0, pilha.tamanho());
        pilha.empilha("item1");
        assertEquals(1, pilha.tamanho());
        pilha.empilha("item2");
        assertEquals(2, pilha.tamanho());
    }
}
```
Note that I've covered all the methods in the Pilha class, including the default constructor, and tested all the conditional expressions with true and false values. I've also included tests with boundary values, such as testing the empilha method with a full stack. Additionally, I've included tests for the vazia and tamanho methods, which are simple but still need to be tested.