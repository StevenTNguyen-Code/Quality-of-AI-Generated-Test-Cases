Here is the test class for the `Pilha` class:
```
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;
import ds.*;

public class PilhaTest {

    private Pilha pilha;

    @Before
    public void setup() throws Exception {
        pilha = new Pilha();
    }

    @Test(timeout = 1000)
    public void testDefaultConstructor() throws Exception {
        assertNotNull(pilha);
        assertEquals(0, pilha.tamanho());
    }

    @Test(timeout = 1000)
    public void testEmpilhaPositiveValue() throws Exception {
        pilha.empilha("Hello");
        assertEquals(1, pilha.tamanho());
    }

    @Test(timeout = 1000)
    public void testEmpilhaNegativeValue() throws Exception {
        pilha.empilha(-1);
        assertEquals(1, pilha.tamanho());
    }

    @Test(timeout = 1000, expected = Exception.class)
    public void testEmpilhaFullStack() throws Exception {
        for (int i = 0; i < 1000; i++) {
            pilha.empilha(i);
        }
        pilha.empilha("Full stack");
    }

    @Test(timeout = 1000)
    public void testDesempilhaNotEmpty() throws Exception {
        pilha.empilha("Hello");
        Object desempilhado = pilha.desempilha();
        assertEquals("Hello", desempilhado);
        assertEquals(0, pilha.tamanho());
    }

    @Test(timeout = 1000, expected = Exception.class)
    public void testDesempilhaEmpty() throws Exception {
        pilha.desempilha();
    }

    @Test(timeout = 1000)
    public void testVaziaTrue() throws Exception {
        assertTrue(pilha.vazia());
    }

    @Test(timeout = 1000)
    public void testVaziaFalse() throws Exception {
        pilha.empilha("Hello");
        assertFalse(pilha.vazia());
    }

    @Test(timeout = 1000)
    public void testTamanhoZero() throws Exception {
        assertEquals(0, pilha.tamanho());
    }

    @Test(timeout = 1000)
    public void testTamanhoGreaterThanZero() throws Exception {
        pilha.empilha("Hello");
        assertEquals(1, pilha.tamanho());
    }
}
```
Note that I've covered all the methods of the `Pilha` class, including the default constructor. I've also included test cases for boundary values, such as an empty stack and a full stack. Additionally, I've tested all conditional expressions in the `Pilha` class with true and false values.