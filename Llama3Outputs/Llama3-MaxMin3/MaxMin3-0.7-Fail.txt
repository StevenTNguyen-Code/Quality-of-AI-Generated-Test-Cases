Here is the Java unit test code for the `MaxMin3` class:
```
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;
import ds.*;

public class MaxMin3Test {

    @Before
    public void setup() {
        // No setup required for this test
    }

    @Test(timeout = 1000)
    public void testDefaultConstructor() throws Exception {
        new MaxMin3(); // Test that the default constructor does not throw an exception
    }

    @Test(timeout = 1000)
    public void testMaxMin3_evenLengthArray() throws Exception {
        int[] v = {1, 2, 3, 4};
        int n = v.length;
        int[] result = MaxMin3.maxMin3(v, n);
        assertEquals(4, result[0]); // max
        assertEquals(1, result[1]); // min
    }

    @Test(timeout = 1000)
    public void testMaxMin3_oddLengthArray() throws Exception {
        int[] v = {1, 2, 3, 4, 5};
        int n = v.length;
        int[] result = MaxMin3.maxMin3(v, n);
        assertEquals(5, result[0]); // max
        assertEquals(1, result[1]); // min
    }

    @Test(timeout = 1000)
    public void testMaxMin3_singleElementArray() throws Exception {
        int[] v = {1};
        int n = v.length;
        int[] result = MaxMin3.maxMin3(v, n);
        assertEquals(1, result[0]); // max
        assertEquals(1, result[1]); // min
    }

    @Test(timeout = 1000)
    public void testMaxMin3_emptyArray() throws Exception {
        int[] v = {};
        int n = v.length;
        try {
            MaxMin3.maxMin3(v, n);
            fail("Expected ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // Expected exception
        }
    }

    @Test(timeout = 1000)
    public void testMaxMin3_nullArray() throws Exception {
        int[] v = null;
        int n = 0;
        try {
            MaxMin3.maxMin3(v, n);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 1000)
    public void testMaxMin3_boundaryValues() throws Exception {
        int[] v = {Integer.MAX_VALUE, Integer.MIN_VALUE};
        int n = v.length;
        int[] result = MaxMin3.maxMin3(v, n);
        assertEquals(Integer.MAX_VALUE, result[0]); // max
        assertEquals(Integer.MIN_VALUE, result[1]); // min
    }

    @Test(timeout = 1000)
    public void testMaxMin3_positiveValues() throws Exception {
        int[] v = {1, 2, 3, 4, 5};
        int n = v.length;
        int[] result = MaxMin3.maxMin3(v, n);
        assertEquals(5, result[0]); // max
        assertEquals(1, result[1]); // min
    }

    @Test(timeout = 1000)
    public void testMaxMin3_negativeValues() throws Exception {
        int[] v = {-1, -2, -3, -4, -5};
        int n = v.length;
        int[] result = MaxMin3.maxMin3(v, n);
        assertEquals(-1, result[0]); // max
        assertEquals(-5, result[1]); // min
    }

    @Test(timeout = 1000)
    public void testMaxMin3_mixedValues() throws Exception {
        int[] v = {-1, 2, -3, 4, -5};
        int n = v.length;
        int[] result = MaxMin3.maxMin3(v, n);
        assertEquals(4, result[0]); // max
        assertEquals(-5, result[1]); // min
    }
}
```
Note that I've covered all the possible scenarios, including:

* Default constructor test
* Even and odd length arrays
* Single element array
* Empty array
* Null array
* Boundary values (MAX_VALUE and MIN_VALUE)
* Positive values
* Negative values
* Mixed values

Each test method has a timeout of 1000 milliseconds, and I've used the `@Test` annotation with the `timeout` parameter. I've also used the `@Before` annotation to setup any required test data, but in this case, no setup is required.

I've used the `assertEquals` method to verify the expected results, and the `fail` method to test for expected exceptions.