Here is the test class for the `Ordenacao` class:

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;
import ds.*;

public class OrdenacaoTest {

    private Ordenacao ordenacao;

    @Before
    public void setup() {
        ordenacao = new Ordenacao();
    }

    @Test(timeout = 1000)
    public void testOrdenaNullArray() throws NullPointerException {
        int[] v = null;
        try {
            Ordenacao.ordena(v, 0);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // expected
        }
    }

    @Test(timeout = 1000)
    public void testOrdenaNegativeN() throws IllegalArgumentException {
        int[] v = {1, 2, 3};
        try {
            Ordenacao.ordena(v, -1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // expected
        }
    }

    @Test(timeout = 1000)
    public void testOrdenaEmptyArray() throws Exception {
        int[] v = {};
        Ordenacao.ordena(v, 0);
        // no exception expected
    }

    @Test(timeout = 1000)
    public void testOrdenaSingleElementArray() throws Exception {
        int[] v = {1};
        Ordenacao.ordena(v, 1);
        assertEquals(1, v[0]);
    }

    @Test(timeout = 1000)
    public void testOrdenaAlreadySortedArray() throws Exception {
        int[] v = {1, 2, 3, 4, 5};
        Ordenacao.ordena(v, 5);
        assertArrayEquals(new int[]{1, 2, 3, 4, 5}, v);
    }

    @Test(timeout = 1000)
    public void testOrdenaReverseSortedArray() throws Exception {
        int[] v = {5, 4, 3, 2, 1};
        Ordenacao.ordena(v, 5);
        assertArrayEquals(new int[]{1, 2, 3, 4, 5}, v);
    }

    @Test(timeout = 1000)
    public void testOrdenaPositiveAndNegativeNumbers() throws Exception {
        int[] v = {-5, 4, 3, -2, 1};
        Ordenacao.ordena(v, 5);
        assertArrayEquals(new int[]{-5, -2, 1, 3, 4}, v);
    }

    @Test(timeout = 1000)
    public void testOrdenaBoundaryValues() throws Exception {
        int[] v = {Integer.MAX_VALUE, Integer.MIN_VALUE, 0};
        Ordenacao.ordena(v, 3);
        assertArrayEquals(new int[]{Integer.MIN_VALUE, 0, Integer.MAX_VALUE}, v);
    }

    @Test(timeout = 1000)
    public void testDefaultConstructor() throws Exception {
        Ordenacao ordenacao2 = new Ordenacao();
        assertNotNull(ordenacao2);
    }
}
```

This test class covers all the decisions in the `ordena` method of the `Ordenacao` class, including boundary values and edge cases. It also tests the default constructor.