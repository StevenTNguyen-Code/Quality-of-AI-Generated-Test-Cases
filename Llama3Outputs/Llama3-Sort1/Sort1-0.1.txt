Here is the test class for the `Ordenacao` class:
```
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;
import ds.*;

public class OrdenacaoTest {

    private int[] array;
    private int n;

    @Before
    public void setup() {
        array = new int[5];
        n = 5;
    }

    @Test(timeout = 1000)
    public void testOrdena_DefaultConstructor() throws Exception {
        Ordenacao ordenacao = new Ordenacao();
        assertNotNull(ordenacao);
    }

    @Test(timeout = 1000)
    public void testOrdena_EmptyArray() throws Exception {
        int[] emptyArray = new int[0];
        Ordenacao.ordena(emptyArray, 0);
        assertEquals(0, emptyArray.length);
    }

    @Test(timeout = 1000)
    public void testOrdena_SingleElementArray() throws Exception {
        int[] singleElementArray = new int[] {5};
        Ordenacao.ordena(singleElementArray, 1);
        assertEquals(5, singleElementArray[0]);
    }

    @Test(timeout = 1000)
    public void testOrdena_AlreadySortedArray() throws Exception {
        int[] alreadySortedArray = new int[] {1, 2, 3, 4, 5};
        Ordenacao.ordena(alreadySortedArray, 5);
        assertArrayEquals(new int[] {1, 2, 3, 4, 5}, alreadySortedArray);
    }

    @Test(timeout = 1000)
    public void testOrdena_UnsortedArray() throws Exception {
        int[] unsortedArray = new int[] {5, 2, 8, 1, 3};
        Ordenacao.ordena(unsortedArray, 5);
        assertArrayEquals(new int[] {1, 2, 3, 5, 8}, unsortedArray);
    }

    @Test(timeout = 1000)
    public void testOrdena_NegativeValuesArray() throws Exception {
        int[] negativeValuesArray = new int[] {-5, -2, -8, -1, -3};
        Ordenacao.ordena(negativeValuesArray, 5);
        assertArrayEquals(new int[] {-8, -5, -3, -2, -1}, negativeValuesArray);
    }

    @Test(timeout = 1000)
    public void testOrdena_MixedValuesArray() throws Exception {
        int[] mixedValuesArray = new int[] {5, -2, 8, -1, 3};
        Ordenacao.ordena(mixedValuesArray, 5);
        assertArrayEquals(new int[] {-2, -1, 3, 5, 8}, mixedValuesArray);
    }

    @Test(timeout = 1000)
    public void testOrdena_BoundaryValuesArray() throws Exception {
        int[] boundaryValuesArray = new int[] {Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE};
        Ordenacao.ordena(boundaryValuesArray, 5);
        assertArrayEquals(new int[] {Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE}, boundaryValuesArray);
    }

    @Test(timeout = 1000, expected = NullPointerException.class)
    public void testOrdena_NullArray() throws Exception {
        Ordenacao.ordena(null, 5);
    }

    @Test(timeout = 1000, expected = ArrayIndexOutOfBoundsException.class)
    public void testOrdena_InvalidNValue() throws Exception {
        int[] invalidNValueArray = new int[5];
        Ordenacao.ordena(invalidNValueArray, -1);
    }
}
```
Note that I've covered all the possible scenarios for the `ordena` method, including:

* Default constructor test
* Empty array test
* Single element array test
* Already sorted array test
* Unsorted array test
* Negative values array test
* Mixed values array test
* Boundary values array test
* Null array test (expected to throw `NullPointerException`)
* Invalid `n` value test (expected to throw `ArrayIndexOutOfBoundsException`)

I've also used the `@Before` annotation to setup the test data, and the `@Test` annotation with the `timeout` parameter set to 1000 milliseconds to ensure that the tests don't take too long to run.