Here is the JUnit 4 test class for the Fibonacci class:
```
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;
import ds.*;

public class FibonacciTest {

    private Fibonacci fibonacci;

    @Before
    public void setup() {
        fibonacci = new Fibonacci();
    }

    @Test(timeout = 1000)
    public void testFibIter_DefaultConstructor() throws Exception {
        // Test default constructor
        assertNotNull(fibonacci);
    }

    @Test(timeout = 1000)
    public void testFibIter_PositiveInput() throws Exception {
        // Test fibIter with positive input
        assertEquals(1, fibonacci.fibIter(1));
        assertEquals(1, fibonacci.fibIter(2));
        assertEquals(2, fibonacci.fibIter(3));
        assertEquals(3, fibonacci.fibIter(4));
        assertEquals(5, fibonacci.fibIter(5));
    }

    @Test(timeout = 1000)
    public void testFibIter_NegativeInput() throws Exception {
        // Test fibIter with negative input
        try {
            fibonacci.fibIter(-1);
            fail("Expected IllegalArgumentException for negative input");
        } catch (IllegalArgumentException e) {
            // Expected
        }
    }

    @Test(timeout = 1000)
    public void testFibIter_BoundaryValueZero() throws Exception {
        // Test fibIter with boundary value 0
        assertEquals(0, fibonacci.fibIter(0));
    }

    @Test(timeout = 1000)
    public void testFibIter_LargeInput() throws Exception {
        // Test fibIter with large input
        assertEquals(55, fibonacci.fibIter(10));
    }
}
```
Note that I've added a `setup()` method to create an instance of the `Fibonacci` class before each test, and I've used the `@Before` annotation to ensure it's called before each test.

I've also added test cases to cover the following scenarios:

* Default constructor
* Positive input values
* Negative input values (expected to throw an `IllegalArgumentException`)
* Boundary value 0
* Large input value

Each test method has a timeout of 1000 milliseconds, as required.