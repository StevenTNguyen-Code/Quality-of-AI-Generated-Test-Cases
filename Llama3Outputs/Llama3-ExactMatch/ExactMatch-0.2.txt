Here is the test class for the `CasamentoExato` class:
```
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;
import ds.CasamentoExato;

public class CasamentoExatoTest {

    @Before
    public void setup() {
        // No setup needed for this class
    }

    @Test(timeout = 1000)
    public void testForcaBruta() throws Exception {
        String T = "abcdefghij";
        int n = T.length();
        String P = "cde";
        int m = P.length();
        CasamentoExato.forcaBruta(T, n, P, m);
    }

    @Test(timeout = 1000)
    public void testForcaBruta_EmptyPattern() throws Exception {
        String T = "abcdefghij";
        int n = T.length();
        String P = "";
        int m = P.length();
        CasamentoExato.forcaBruta(T, n, P, m);
    }

    @Test(timeout = 1000)
    public void testForcaBruta_EmptyText() throws Exception {
        String T = "";
        int n = T.length();
        String P = "cde";
        int m = P.length();
        CasamentoExato.forcaBruta(T, n, P, m);
    }

    @Test(timeout = 1000)
    public void testShiftAndExato() throws Exception {
        String T = "abcdefghij";
        int n = T.length();
        String P = "cde";
        int m = P.length();
        CasamentoExato.shiftAndExato(T, n, P, m);
    }

    @Test(timeout = 1000)
    public void testShiftAndExato_EmptyPattern() throws Exception {
        String T = "abcdefghij";
        int n = T.length();
        String P = "";
        int m = P.length();
        CasamentoExato.shiftAndExato(T, n, P, m);
    }

    @Test(timeout = 1000)
    public void testShiftAndExato_EmptyText() throws Exception {
        String T = "";
        int n = T.length();
        String P = "cde";
        int m = P.length();
        CasamentoExato.shiftAndExato(T, n, P, m);
    }

    @Test(timeout = 1000)
    public void testBmh() throws Exception {
        String T = "abcdefghij";
        int n = T.length();
        String P = "cde";
        int m = P.length();
        CasamentoExato.bmh(T, n, P, m);
    }

    @Test(timeout = 1000)
    public void testBmh_EmptyPattern() throws Exception {
        String T = "abcdefghij";
        int n = T.length();
        String P = "";
        int m = P.length();
        CasamentoExato.bmh(T, n, P, m);
    }

    @Test(timeout = 1000)
    public void testBmh_EmptyText() throws Exception {
        String T = "";
        int n = T.length();
        String P = "cde";
        int m = P.length();
        CasamentoExato.bmh(T, n, P, m);
    }

    @Test(timeout = 1000)
    public void testBmhs() throws Exception {
        String T = "abcdefghij";
        int n = T.length();
        String P = "cde";
        int m = P.length();
        CasamentoExato.bmhs(T, n, P, m);
    }

    @Test(timeout = 1000)
    public void testBmhs_EmptyPattern() throws Exception {
        String T = "abcdefghij";
        int n = T.length();
        String P = "";
        int m = P.length();
        CasamentoExato.bmhs(T, n, P, m);
    }

    @Test(timeout = 1000)
    public void testBmhs_EmptyText() throws Exception {
        String T = "";
        int n = T.length();
        String P = "cde";
        int m = P.length();
        CasamentoExato.bmhs(T, n, P, m);
    }

    @Test(timeout = 1000)
    public void testDefaultConstructor() throws Exception {
        new CasamentoExato();
    }
}
```
Note that I've added test cases for each method in the `CasamentoExato` class, including tests for empty patterns and empty texts. I've also added a test for the default constructor. Each test method has a timeout of 1000 milliseconds, as required.