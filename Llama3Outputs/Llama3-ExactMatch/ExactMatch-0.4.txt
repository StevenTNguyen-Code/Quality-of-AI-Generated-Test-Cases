Here is the test class for the provided Java class:

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

public class CasamentoExatoTest {

    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;

    @Before
    public void setUpStreams() {
        System.setOut(new PrintStream(outContent));
    }

    @Test(timeout = 1000)
    public void testForcaBruta() throws Exception {
        CasamentoExato.forcaBruta("hello", 5, "ll", 2);
        assertEquals("Casamento na posicao: 2\r\n", outContent.toString());
    }

    @Test(timeout = 1000)
    public void testForcaBrutaNoMatch() throws Exception {
        CasamentoExato.forcaBruta("hello", 5, "zz", 2);
        assertEquals("", outContent.toString());
    }

    @Test(timeout = 1000)
    public void testForcaBrutaEmptyPattern() throws Exception {
        CasamentoExato.forcaBruta("hello", 5, "", 0);
        assertEquals("", outContent.toString());
    }

    @Test(timeout = 1000)
    public void testForcaBrutaEmptyText() throws Exception {
        CasamentoExato.forcaBruta("", 0, "ll", 2);
        assertEquals("", outContent.toString());
    }

    @Test(timeout = 1000)
    public void testShiftAndExato() throws Exception {
        CasamentoExato.shiftAndExato("hello", 5, "ll", 2);
        assertEquals("Casamento na posicao: 2\r\n", outContent.toString());
    }

    @Test(timeout = 1000)
    public void testShiftAndExatoNoMatch() throws Exception {
        CasamentoExato.shiftAndExato("hello", 5, "zz", 2);
        assertEquals("", outContent.toString());
    }

    @Test(timeout = 1000)
    public void testShiftAndExatoEmptyPattern() throws Exception {
        CasamentoExato.shiftAndExato("hello", 5, "", 0);
        assertEquals("", outContent.toString());
    }

    @Test(timeout = 1000)
    public void testShiftAndExatoEmptyText() throws Exception {
        CasamentoExato.shiftAndExato("", 0, "ll", 2);
        assertEquals("", outContent.toString());
    }

    @Test(timeout = 1000)
    public void testBmh() throws Exception {
        CasamentoExato.bmh("hello", 5, "ll", 2);
        assertEquals("Casamento na posicao: 2\r\n", outContent.toString());
    }

    @Test(timeout = 1000)
    public void testBmhNoMatch() throws Exception {
        CasamentoExato.bmh("hello", 5, "zz", 2);
        assertEquals("", outContent.toString());
    }

    @Test(timeout = 1000)
    public void testBmhEmptyPattern() throws Exception {
        CasamentoExato.bmh("hello", 5, "", 0);
        assertEquals("", outContent.toString());
    }

    @Test(timeout = 1000)
    public void testBmhEmptyText() throws Exception {
        CasamentoExato.bmh("", 0, "ll", 2);
        assertEquals("", outContent.toString());
    }

    @Test(timeout = 1000)
    public void testBmhs() throws Exception {
        CasamentoExato.bmhs("hello", 5, "ll", 2);
        assertEquals("Casamento na posicao: 2\r\n", outContent.toString());
    }

    @Test(timeout = 1000)
    public void testBmhsNoMatch() throws Exception {
        CasamentoExato.bmhs("hello", 5, "zz", 2);
        assertEquals("", outContent.toString());
    }

    @Test(timeout = 1000)
    public void testBmhsEmptyPattern() throws Exception {
        CasamentoExato.bmhs("hello", 5, "", 0);
        assertEquals("", outContent.toString());
    }

    @Test(timeout = 1000)
    public void testBmhsEmptyText() throws Exception {
        CasamentoExato.bmhs("", 0, "ll", 2);
        assertEquals("", outContent.toString());
    }
}
```

This test class covers all the methods of the `CasamentoExato` class with different test cases, including boundary values and edge cases. It also tests the default constructor. The `@Before` method is used to set up the output stream for each test. The `assertEquals` method is used to verify the output of each method.