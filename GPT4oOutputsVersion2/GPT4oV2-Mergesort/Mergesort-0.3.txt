Certainly! Below is the Java Unit Test code for the provided `Ordenacao` class using JUnit 4 framework and Java 8. The test cases cover all decisions in the methods, including boundary values and both positive and negative numeric data. The tests also include a timeout of 1000 milliseconds for each test method.

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;
import ds.*;

public class OrdenacaoTest {

    private Ordenacao ordenacao;

    @Before
    public void setUp() throws Exception {
        ordenacao = new Ordenacao();
    }

    @Test(timeout=1000)
    public void testMergeSortWithPositiveValues() throws Exception {
        int[] array = {5, 3, 8, 4, 2};
        int[] expected = {2, 3, 4, 5, 8};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(expected, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithNegativeValues() throws Exception {
        int[] array = {-5, -3, -8, -4, -2};
        int[] expected = {-8, -5, -4, -3, -2};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(expected, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithMixedValues() throws Exception {
        int[] array = {5, -3, 8, -4, 2};
        int[] expected = {-4, -3, 2, 5, 8};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(expected, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithSingleElement() throws Exception {
        int[] array = {1};
        int[] expected = {1};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(expected, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithEmptyArray() throws Exception {
        int[] array = {};
        int[] expected = {};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(expected, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithBoundaryValues() throws Exception {
        int[] array = {Integer.MAX_VALUE, Integer.MIN_VALUE, 0};
        int[] expected = {Integer.MIN_VALUE, 0, Integer.MAX_VALUE};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(expected, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithDuplicateValues() throws Exception {
        int[] array = {5, 3, 8, 3, 2};
        int[] expected = {2, 3, 3, 5, 8};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(expected, array);
    }
}
```

### Explanation:
1. **Setup Method**: The `setUp` method initializes an instance of the `Ordenacao` class before each test.
2. **Test Methods**: Each test method is annotated with `@Test(timeout=1000)` to ensure the test completes within 1000 milliseconds.
3. **Test Cases**:
   - **Positive Values**: Tests sorting of an array with positive integers.
   - **Negative Values**: Tests sorting of an array with negative integers.
   - **Mixed Values**: Tests sorting of an array with both positive and negative integers.
   - **Single Element**: Tests sorting of an array with a single element.
   - **Empty Array**: Tests sorting of an empty array.
   - **Boundary Values**: Tests sorting of an array with boundary values (`Integer.MAX_VALUE` and `Integer.MIN_VALUE`).
   - **Duplicate Values**: Tests sorting of an array with duplicate values.

These tests ensure that all conditional expressions in the `mergeSort` and `merge` methods are covered, including boundary values and both positive and negative numeric data.