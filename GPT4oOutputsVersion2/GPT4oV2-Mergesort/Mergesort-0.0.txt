Certainly! Below is a set of JUnit 4 test cases for the `Ordenacao` class, covering all decisions, boundary values, and including the necessary imports and annotations as specified.

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;
import ds.*;

public class OrdenacaoTest {

    private Ordenacao ordenacao;

    @Before
    public void setUp() {
        ordenacao = new Ordenacao();
    }

    @Test(timeout=1000)
    public void testMergeSortWithEmptyArray() throws Exception {
        int[] array = {};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(new int[]{}, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithSingleElementArray() throws Exception {
        int[] array = {1};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(new int[]{1}, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithTwoElementsArray() throws Exception {
        int[] array = {2, 1};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(new int[]{1, 2}, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithSortedArray() throws Exception {
        int[] array = {1, 2, 3, 4, 5};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(new int[]{1, 2, 3, 4, 5}, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithUnsortedArray() throws Exception {
        int[] array = {5, 4, 3, 2, 1};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(new int[]{1, 2, 3, 4, 5}, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithNegativeValues() throws Exception {
        int[] array = {-1, -3, -2, -5, -4};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(new int[]{-5, -4, -3, -2, -1}, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithMixedValues() throws Exception {
        int[] array = {3, -1, 2, -5, 4};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(new int[]{-5, -1, 2, 3, 4}, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithDuplicateValues() throws Exception {
        int[] array = {3, 1, 2, 1, 3};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(new int[]{1, 1, 2, 3, 3}, array);
    }

    @Test(timeout=1000)
    public void testMergeSortWithLargeValues() throws Exception {
        int[] array = {Integer.MAX_VALUE, Integer.MIN_VALUE, 0, -1, 1};
        Ordenacao.mergeSort(array, 0, array.length - 1);
        assertArrayEquals(new int[]{Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE}, array);
    }
}
```

### Explanation:
1. **Imports and Package**: The necessary imports and package declaration are included at the top.
2. **Setup Method**: The `setUp` method initializes the `Ordenacao` object before each test.
3. **Test Cases**:
   - **Empty Array**: Tests the behavior with an empty array.
   - **Single Element Array**: Tests the behavior with a single element.
   - **Two Elements Array**: Tests the behavior with a two-element array.
   - **Sorted Array**: Tests the behavior with an already sorted array.
   - **Unsorted Array**: Tests the behavior with an unsorted array.
   - **Negative Values**: Tests the behavior with negative values.
   - **Mixed Values**: Tests the behavior with a mix of positive and negative values.
   - **Duplicate Values**: Tests the behavior with duplicate values.
   - **Large Values**: Tests the behavior with large integer values, including `Integer.MAX_VALUE` and `Integer.MIN_VALUE`.

Each test method includes the `timeout=1000` annotation to ensure the test completes within 1000 milliseconds. The `assertArrayEquals` method is used to verify the sorted array against the expected result.