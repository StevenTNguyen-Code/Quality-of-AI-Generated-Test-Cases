Certainly! Below is the Java code for unit tests corresponding to your requirements for the `MaxMin4` class in the `ds` package:

```java
package ds;

import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class MaxMin4Test {

    private MaxMin4 maxMin4;

    @Before
    public void setUp() {
        maxMin4 = new MaxMin4();
    }

    @Test(timeout = 1000)
    public void testMaxMin4SingleElement() throws Exception {
        int[] v = {10};
        int[] result = maxMin4.maxMin4(v, 0, 0);
        assertArrayEquals(new int[]{10, 10}, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin4TwoElementsAscending() throws Exception {
        int[] v = {1, 10};
        int[] result = maxMin4.maxMin4(v, 0, 1);
        assertArrayEquals(new int[]{10, 1}, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin4TwoElementsDescending() throws Exception {
        int[] v = {10, 1};
        int[] result = maxMin4.maxMin4(v, 0, 1);
        assertArrayEquals(new int[]{10, 1}, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin4MultipleElements() throws Exception {
        int[] v = {3, 1, 4, 1, 5, 9, 2, 6, 5};
        int[] result = maxMin4.maxMin4(v, 0, v.length - 1);
        assertArrayEquals(new int[]{9, 1}, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin4NegativeValues() throws Exception {
        int[] v = {-3, -1, -4, -1, -5, -9, -2, -6, -5};
        int[] result = maxMin4.maxMin4(v, 0, v.length - 1);
        assertArrayEquals(new int[]{-1, -9}, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin4MixedValues() throws Exception {
        int[] v = {3, -1, 4, 1, -5, 9, 2, -6, 5};
        int[] result = maxMin4.maxMin4(v, 0, v.length - 1);
        assertArrayEquals(new int[]{9, -6}, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin4BoundaryValues() throws Exception {
        int[] v = {Integer.MIN_VALUE, Integer.MAX_VALUE};
        int[] result = maxMin4.maxMin4(v, 0, 1);
        assertArrayEquals(new int[]{Integer.MAX_VALUE, Integer.MIN_VALUE}, result);
    }

    @Test(timeout = 1000, expected = ArrayIndexOutOfBoundsException.class)
    public void testMaxMin4ArrayIndexOutOfBoundsLow() throws Exception {
        int[] v = {1, 2, 3};
        maxMin4.maxMin4(v, -1, 2);
    }

    @Test(timeout = 1000, expected = ArrayIndexOutOfBoundsException.class)
    public void testMaxMin4ArrayIndexOutOfBoundsHigh() throws Exception {
        int[] v = {1, 2, 3};
        maxMin4.maxMin4(v, 0, 3);
    }

    @Test(timeout = 1000, expected = NullPointerException.class)
    public void testMaxMin4NullArray() throws Exception {
        maxMin4.maxMin4(null, 0, 1);
    }

    @Test(timeout = 1000)
    public void testDefaultConstructor() throws Exception {
        maxMin4 = new MaxMin4();
        assertNotNull(maxMin4);
    }
}
```

### Test Case Details:

1. **Single Element**: Tests with an array containing a single element.
2. **Two Elements Ascending**: Tests with two elements in ascending order.
3. **Two Elements Descending**: Tests with two elements in descending order.
4. **Multiple Elements**: Tests with a typical array of multiple elements.
5. **Negative Values**: Tests with all negative values.
6. **Mixed Values**: Tests with both positive and negative values.
7. **Boundary Values**: Tests with the `Integer.MIN_VALUE` and `Integer.MAX_VALUE`.
8. **Array Index Out of Bounds Low**: Tests to ensure out-of-bounds low index throws an exception.
9. **Array Index Out of Bounds High**: Tests to ensure out-of-bounds high index throws an exception.
10. **Null Array**: Tests to ensure passing a null array throws `NullPointerException`.
11. **Default Constructor**: Tests the existence and functionality of the default constructor.

### Notes:

- The `@Test` annotations include the `timeout = 1000` parameter as requested.
- Exception scenarios use the `@Test(expected =...)` syntax where applicable.
- The `ArrayIndexOutOfBoundsException` and `NullPointerException` are tested for appropriate cases.
- Each test should cover various decision points and conditional expressions, as requested.

Be sure to have JUnit 4 included in your build path to run these tests successfully.