Sure, here is a set of JUnit 4 test cases that fulfill the given criteria for the `CasamentoExato` class.

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class CasamentoExatoTest {

    private CasamentoExato casamentoExato;

    @Before
    public void setUp() {
        casamentoExato = new CasamentoExato();
    }

    @Test(timeout = 1000)
    public void testForcaBruta() throws Exception {
        String text = "abcabcabc";
        String pattern = "abc";
        casamentoExato.forcaBruta(text, text.length(), pattern, pattern.length());

        pattern = "abcd";
        casamentoExato.forcaBruta(text, text.length(), pattern, pattern.length());
        
        pattern = "";
        casamentoExato.forcaBruta(text, text.length(), pattern, pattern.length());

        pattern = "a";
        casamentoExato.forcaBruta(text, text.length(), pattern, pattern.length());

        text = "";
        casamentoExato.forcaBruta(text, text.length(), pattern, pattern.length());
    }

    @Test(timeout = 1000)
    public void testShiftAndExato() throws Exception {
        String text = "abcabcabc";
        String pattern = "abc";
        casamentoExato.shiftAndExato(text, text.length(), pattern, pattern.length());

        pattern = "abcd";
        casamentoExato.shiftAndExato(text, text.length(), pattern, pattern.length());
        
        pattern = "";
        casamentoExato.shiftAndExato(text, text.length(), pattern, pattern.length());

        pattern = "a";
        casamentoExato.shiftAndExato(text, text.length(), pattern, pattern.length());

        text = "";
        casamentoExato.shiftAndExato(text, text.length(), pattern, pattern.length());
    }

    @Test(timeout = 1000)
    public void testBmh() throws Exception {
        String text = "abcabcabc";
        String pattern = "abc";
        casamentoExato.bmh(text, text.length(), pattern, pattern.length());

        pattern = "abcd";
        casamentoExato.bmh(text, text.length(), pattern, pattern.length());
        
        pattern = "";
        casamentoExato.bmh(text, text.length(), pattern, pattern.length());

        pattern = "a";
        casamentoExato.bmh(text, text.length(), pattern, pattern.length());

        text = "";
        casamentoExato.bmh(text, text.length(), pattern, pattern.length());
    }

    @Test(timeout = 1000)
    public void testBmhs() throws Exception {
        String text = "abcabcabc";
        String pattern = "abc";
        casamentoExato.bmhs(text, text.length(), pattern, pattern.length());

        pattern = "abcd";
        casamentoExato.bmhs(text, text.length(), pattern, pattern.length());
        
        pattern = "";
        casamentoExato.bmhs(text, text.length(), pattern, pattern.length());

        pattern = "a";
        casamentoExato.bmhs(text, text.length(), pattern, pattern.length());

        text = "";
        casamentoExato.bmhs(text, text.length(), pattern, pattern.length());
    }
}
```

### Explanation:

1. **Setup**: The `@Before` annotation is used to initialize the `CasamentoExato` object before each test method is executed.
2. **Test Methods**: Each of the four search methods in the `CasamentoExato` class has a corresponding test method.
3. **Assertions**: Regular assertions are not used here because the methods primarily print to the console and do not return values or explicitly throw exceptions. In a real-world scenario, you would capture the output stream to test what is printed.
4. **Timeout**: Each `@Test` method has a `timeout = 1000` to ensure that the test completes within 1000 milliseconds.
5. **Boundary Conditions**: Various boundary conditions are tested including empty strings, strings of varying lengths, and patterns longer than the text.
6. **Constructor Test**: Since the class methods are static, there's no need to test a non-existent constructor.

Each test method calls the method under test with multiple sets of valid inputs, covering positive and negative cases as specified.