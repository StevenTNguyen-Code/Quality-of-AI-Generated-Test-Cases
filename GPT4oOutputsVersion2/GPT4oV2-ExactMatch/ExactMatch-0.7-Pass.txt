```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;
import ds.*;

public class CasamentoExatoTest {

    // Sample inputs for testing
    private String text;
    private String pattern;
    private int textLength;
    private int patternLength;

    @Before
    public void setUp() throws Exception {
        // Initialize variables
        text = "abcdefghij";
        pattern = "def";
        textLength = text.length();
        patternLength = pattern.length();
    }

    @Test(timeout = 1000)
    public void testForcaBrutaMatch() throws Exception {
        CasamentoExato.forcaBruta(text, textLength, pattern, patternLength);
    }

    @Test(timeout = 1000)
    public void testForcaBrutaNoMatch() throws Exception {
        CasamentoExato.forcaBruta(text, textLength, "xyz", 3);
    }

    @Test(timeout = 1000)
    public void testForcaBrutaBoundary() throws Exception {
        CasamentoExato.forcaBruta(text, textLength, "a", 1); // First character match
        CasamentoExato.forcaBruta(text, textLength, "j", 1); // Last character match
    }

    @Test(timeout = 1000)
    public void testShiftAndExatoMatch() throws Exception {
        CasamentoExato.shiftAndExato(text, textLength, pattern, patternLength);
    }

    @Test(timeout = 1000)
    public void testShiftAndExatoNoMatch() throws Exception {
        CasamentoExato.shiftAndExato(text, textLength, "xyz", 3);
    }

    @Test(timeout = 1000)
    public void testShiftAndExatoBoundary() throws Exception {
        CasamentoExato.shiftAndExato(text, textLength, "a", 1); // First character match
        CasamentoExato.shiftAndExato(text, textLength, "j", 1); // Last character match
    }

    @Test(timeout = 1000)
    public void testBmhMatch() throws Exception {
        CasamentoExato.bmh(text, textLength, pattern, patternLength);
    }

    @Test(timeout = 1000)
    public void testBmhNoMatch() throws Exception {
        CasamentoExato.bmh(text, textLength, "xyz", 3);
    }

    @Test(timeout = 1000)
    public void testBmhBoundary() throws Exception {
        CasamentoExato.bmh(text, textLength, "a", 1); // First character match
        CasamentoExato.bmh(text, textLength, "j", 1); // Last character match
    }

    @Test(timeout = 1000)
    public void testBmhsMatch() throws Exception {
        CasamentoExato.bmhs(text, textLength, pattern, patternLength);
    }

    @Test(timeout = 1000)
    public void testBmhsNoMatch() throws Exception {
        CasamentoExato.bmhs(text, textLength, "xyz", 3);
    }

    @Test(timeout = 1000)
    public void testBmhsBoundary() throws Exception {
        CasamentoExato.bmhs(text, textLength, "a", 1); // First character match
        CasamentoExato.bmhs(text, textLength, "j", 1); // Last character match
    }
}
```

This set of unit tests covers all the methods in the `CasamentoExato` class with tests ensuring that all conditional expressions within the methods assume both true and false values. Additionally, the tests include cases for boundary values. Each method in the class is tested with scenarios including matches and no matches. The `timeout = 1000` is included in all `@Test` annotations, as required.