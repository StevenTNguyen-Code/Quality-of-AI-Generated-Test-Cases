Certainly! Below is the Java unit test code for the `Ordenacao` class using JUnit 4 framework format. The tests cover all decisions, boundary values, and include necessary imports and annotations as specified.

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class OrdenacaoTest {

    private Ordenacao ordenacao;

    @Before
    public void setUp() {
        ordenacao = new Ordenacao();
    }

    @Test(timeout = 1000)
    public void testDefaultConstructor() throws Exception {
        assertNotNull("Ordenacao instance should be created", ordenacao);
    }

    @Test(timeout = 1000)
    public void testOrdenaWithEmptyArray() throws Exception {
        int[] v = {};
        Ordenacao.ordena(v, 0);
        assertArrayEquals("Empty array should remain empty", new int[]{}, v);
    }

    @Test(timeout = 1000)
    public void testOrdenaWithSingleElement() throws Exception {
        int[] v = {1};
        Ordenacao.ordena(v, 1);
        assertArrayEquals("Single element array should remain unchanged", new int[]{1}, v);
    }

    @Test(timeout = 1000)
    public void testOrdenaWithTwoElements() throws Exception {
        int[] v = {2, 1};
        Ordenacao.ordena(v, 2);
        assertArrayEquals("Array should be sorted", new int[]{1, 2}, v);
    }

    @Test(timeout = 1000)
    public void testOrdenaWithSortedArray() throws Exception {
        int[] v = {1, 2, 3, 4, 5};
        Ordenacao.ordena(v, 5);
        assertArrayEquals("Sorted array should remain sorted", new int[]{1, 2, 3, 4, 5}, v);
    }

    @Test(timeout = 1000)
    public void testOrdenaWithUnsortedArray() throws Exception {
        int[] v = {5, 4, 3, 2, 1};
        Ordenacao.ordena(v, 5);
        assertArrayEquals("Array should be sorted", new int[]{1, 2, 3, 4, 5}, v);
    }

    @Test(timeout = 1000)
    public void testOrdenaWithNegativeValues() throws Exception {
        int[] v = {-1, -3, -2, -5, -4};
        Ordenacao.ordena(v, 5);
        assertArrayEquals("Array with negative values should be sorted", new int[]{-5, -4, -3, -2, -1}, v);
    }

    @Test(timeout = 1000)
    public void testOrdenaWithMixedValues() throws Exception {
        int[] v = {3, -1, 2, -3, 1};
        Ordenacao.ordena(v, 5);
        assertArrayEquals("Array with mixed values should be sorted", new int[]{-3, -1, 1, 2, 3}, v);
    }

    @Test(timeout = 1000)
    public void testOrdenaWithDuplicateValues() throws Exception {
        int[] v = {3, 1, 2, 1, 3};
        Ordenacao.ordena(v, 5);
        assertArrayEquals("Array with duplicate values should be sorted", new int[]{1, 1, 2, 3, 3}, v);
    }

    @Test(timeout = 1000)
    public void testOrdenaWithBoundaryValues() throws Exception {
        int[] v = {Integer.MAX_VALUE, Integer.MIN_VALUE, 0};
        Ordenacao.ordena(v, 3);
        assertArrayEquals("Array with boundary values should be sorted", new int[]{Integer.MIN_VALUE, 0, Integer.MAX_VALUE}, v);
    }
}
```

### Explanation:
1. **Imports**: All necessary imports are included.
2. **Setup**: The `setUp` method initializes the `Ordenacao` instance.
3. **Default Constructor Test**: Ensures the default constructor works.
4. **Test Cases**: Each test case covers different scenarios:
   - Empty array
   - Single element array
   - Two elements array
   - Already sorted array
   - Unsorted array
   - Array with negative values
   - Array with mixed positive and negative values
   - Array with duplicate values
   - Array with boundary values (Integer.MAX_VALUE and Integer.MIN_VALUE)

Each test method is annotated with `@Test(timeout = 1000)` to ensure it completes within the specified time. The tests use `assertArrayEquals` to verify the sorting results.