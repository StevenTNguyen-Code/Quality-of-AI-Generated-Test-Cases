```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;
import ds.*;

public class OrdenacaoTest {

    private Ordenacao ordenacao;

    @Before
    public void setUp() {
        ordenacao = new Ordenacao();
    }

    @Test(timeout=1000)
    public void testDefaultConstructor() throws Exception {
        assertNotNull(new Ordenacao());
    }

    @Test(timeout=1000)
    public void testOrdenaWithPositiveValues() throws Exception {
        int[] array = {5, 3, 8, 4, 2};
        int[] expected = {2, 3, 4, 5, 8};
        Ordenacao.ordena(array, array.length);
        assertArrayEquals(expected, array);
    }

    @Test(timeout=1000)
    public void testOrdenaWithNegativeValues() throws Exception {
        int[] array = {-5, -3, -8, -4, -2};
        int[] expected = {-8, -5, -4, -3, -2};
        Ordenacao.ordena(array, array.length);
        assertArrayEquals(expected, array);
    }

    @Test(timeout=1000)
    public void testOrdenaWithMixedValues() throws Exception {
        int[] array = {5, -3, 8, -4, 2};
        int[] expected = {-4, -3, 2, 5, 8};
        Ordenacao.ordena(array, array.length);
        assertArrayEquals(expected, array);
    }

    @Test(timeout=1000)
    public void testOrdenaWithSingleElement() throws Exception {
        int[] array = {5};
        int[] expected = {5};
        Ordenacao.ordena(array, array.length);
        assertArrayEquals(expected, array);
    }

    @Test(timeout=1000)
    public void testOrdenaWithEmptyArray() throws Exception {
        int[] array = {};
        int[] expected = {};
        Ordenacao.ordena(array, array.length);
        assertArrayEquals(expected, array);
    }

    @Test(timeout=1000)
    public void testOrdenaWithAlreadySortedArray() throws Exception {
        int[] array = {1, 2, 3, 4, 5};
        int[] expected = {1, 2, 3, 4, 5};
        Ordenacao.ordena(array, array.length);
        assertArrayEquals(expected, array);
    }

    @Test(timeout=1000)
    public void testOrdenaWithReverseSortedArray() throws Exception {
        int[] array = {5, 4, 3, 2, 1};
        int[] expected = {1, 2, 3, 4, 5};
        Ordenacao.ordena(array, array.length);
        assertArrayEquals(expected, array);
    }

    @Test(timeout=1000)
    public void testOrdenaWithDuplicateValues() throws Exception {
        int[] array = {5, 3, 8, 3, 2};
        int[] expected = {2, 3, 3, 5, 8};
        Ordenacao.ordena(array, array.length);
        assertArrayEquals(expected, array);
    }

    @Test(timeout=1000)
    public void testOrdenaWithBoundaryValues() throws Exception {
        int[] array = {Integer.MAX_VALUE, Integer.MIN_VALUE, 0};
        int[] expected = {Integer.MIN_VALUE, 0, Integer.MAX_VALUE};
        Ordenacao.ordena(array, array.length);
        assertArrayEquals(expected, array);
    }
}
```