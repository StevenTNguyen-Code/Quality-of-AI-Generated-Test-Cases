Certainly! Below is the Java unit test code for the `MaxMin3` class using JUnit 4 framework. This test suite covers all decisions, boundary values, and includes necessary imports and annotations as specified.

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class MaxMin3Test {

    private MaxMin3 maxMin3;

    @Before
    public void setUp() throws Exception {
        maxMin3 = new MaxMin3();
    }

    @Test(timeout=1000)
    public void testMaxMin3EvenLength() throws Exception {
        int[] input = {1, 3, 5, 7, 9, 11};
        int[] result = MaxMin3.maxMin3(input, input.length);
        assertEquals(11, result[0]);
        assertEquals(1, result[1]);
    }

    @Test(timeout=1000)
    public void testMaxMin3OddLength() throws Exception {
        int[] input = {1, 3, 5, 7, 9};
        int[] result = MaxMin3.maxMin3(input, input.length);
        assertEquals(9, result[0]);
        assertEquals(1, result[1]);
    }

    @Test(timeout=1000)
    public void testMaxMin3NegativeValues() throws Exception {
        int[] input = {-1, -3, -5, -7, -9};
        int[] result = MaxMin3.maxMin3(input, input.length);
        assertEquals(-1, result[0]);
        assertEquals(-9, result[1]);
    }

    @Test(timeout=1000)
    public void testMaxMin3MixedValues() throws Exception {
        int[] input = {-1, 3, -5, 7, -9, 11};
        int[] result = MaxMin3.maxMin3(input, input.length);
        assertEquals(11, result[0]);
        assertEquals(-9, result[1]);
    }

    @Test(timeout=1000)
    public void testMaxMin3SingleElement() throws Exception {
        int[] input = {5};
        int[] result = MaxMin3.maxMin3(input, input.length);
        assertEquals(5, result[0]);
        assertEquals(5, result[1]);
    }

    @Test(timeout=1000)
    public void testMaxMin3TwoElements() throws Exception {
        int[] input = {5, 3};
        int[] result = MaxMin3.maxMin3(input, input.length);
        assertEquals(5, result[0]);
        assertEquals(3, result[1]);
    }

    @Test(timeout=1000)
    public void testMaxMin3BoundaryValues() throws Exception {
        int[] input = {Integer.MAX_VALUE, Integer.MIN_VALUE};
        int[] result = MaxMin3.maxMin3(input, input.length);
        assertEquals(Integer.MAX_VALUE, result[0]);
        assertEquals(Integer.MIN_VALUE, result[1]);
    }

    @Test(timeout=1000)
    public void testMaxMin3EmptyArray() throws Exception {
        int[] input = {};
        int[] result = MaxMin3.maxMin3(input, input.length);
        assertEquals(0, result.length);
    }

    @Test(timeout=1000)
    public void testMaxMin3DefaultConstructor() throws Exception {
        MaxMin3 instance = new MaxMin3();
        assertNotNull(instance);
    }
}
```

### Explanation:
1. **Imports**: All necessary imports are included.
2. **Setup**: The `@Before` annotated `setUp` method initializes the `MaxMin3` instance.
3. **Test Cases**:
   - **Even Length Array**: Tests with an array of even length.
   - **Odd Length Array**: Tests with an array of odd length.
   - **Negative Values**: Tests with an array of negative values.
   - **Mixed Values**: Tests with an array containing both positive and negative values.
   - **Single Element**: Tests with an array containing a single element.
   - **Two Elements**: Tests with an array containing two elements.
   - **Boundary Values**: Tests with an array containing `Integer.MAX_VALUE` and `Integer.MIN_VALUE`.
   - **Empty Array**: Tests with an empty array.
   - **Default Constructor**: Ensures the default constructor works and the instance is not null.

Each test method includes the `timeout=1000` annotation to ensure the test completes within 1000 milliseconds. The `assertEquals` and `assertNotNull` methods are used to verify the expected outcomes.