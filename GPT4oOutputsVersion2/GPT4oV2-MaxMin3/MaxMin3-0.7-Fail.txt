Certainly! Below is the Java unit test code for the `MaxMin3` class using JUnit 4. This code covers all decisions, uses boundary values, and includes all necessary imports and annotations as specified in your requirements.

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;
import ds.MaxMin3;

public class MaxMin3Test {
    
    private MaxMin3 maxMin3;

    @Before
    public void setUp() throws Exception {
        maxMin3 = new MaxMin3();
    }

    @Test(timeout=1000)
    public void testDefaultConstructor() throws Exception {
        assertNotNull(new MaxMin3());
    }

    @Test(timeout=1000)
    public void testMaxMin3EvenLength() throws Exception {
        int[] v = {1, 3, 5, 7};
        int n = 4;
        int[] result = MaxMin3.maxMin3(v, n);
        assertArrayEquals(new int[]{7, 1}, result);
    }

    @Test(timeout=1000)
    public void testMaxMin3OddLength() throws Exception {
        int[] v = {1, 3, 5, 7, 9};
        int n = 5;
        int[] result = MaxMin3.maxMin3(v, n);
        assertArrayEquals(new int[]{9, 1}, result);
    }

    @Test(timeout=1000)
    public void testMaxMin3NegativeValues() throws Exception {
        int[] v = {-1, -3, -5, -7};
        int n = 4;
        int[] result = MaxMin3.maxMin3(v, n);
        assertArrayEquals(new int[]{-1, -7}, result);
    }

    @Test(timeout=1000)
    public void testMaxMin3MixedValues() throws Exception {
        int[] v = {-1, 3, -5, 7};
        int n = 4;
        int[] result = MaxMin3.maxMin3(v, n);
        assertArrayEquals(new int[]{7, -5}, result);
    }

    @Test(timeout=1000)
    public void testMaxMin3SingleElement() throws Exception {
        int[] v = {1};
        int n = 1;
        int[] result = MaxMin3.maxMin3(v, n);
        assertArrayEquals(new int[]{1, 1}, result);
    }

    @Test(timeout=1000)
    public void testMaxMin3TwoElements() throws Exception {
        int[] v = {2, 3};
        int n = 2;
        int[] result = MaxMin3.maxMin3(v, n);
        assertArrayEquals(new int[]{3, 2}, result);
    }

    @Test(timeout=1000)
    public void testMaxMin3BoundaryValues() throws Exception {
        int[] v = {Integer.MAX_VALUE, Integer.MIN_VALUE};
        int n = 2;
        int[] result = MaxMin3.maxMin3(v, n);
        assertArrayEquals(new int[]{Integer.MAX_VALUE, Integer.MIN_VALUE}, result);
    }

    @Test(timeout=1000)
    public void testMaxMin3AllEqualValues() throws Exception {
        int[] v = {5, 5, 5, 5};
        int n = 4;
        int[] result = MaxMin3.maxMin3(v, n);
        assertArrayEquals(new int[]{5, 5}, result);
    }

    @Test(timeout=1000, expected=ArrayIndexOutOfBoundsException.class)
    public void testMaxMin3EmptyArray() throws Exception {
        int[] v = {};
        int n = 0;
        MaxMin3.maxMin3(v, n);
    }
}
```

### Explanation:
1. **Imports and Package**: The necessary imports and package declaration are provided.
2. **Setup**: The `setUp` method initializes the `MaxMin3` object before each test.
3. **Constructor Test**: Ensures that the default constructor works correctly.
4. **Test Cases**:
   - **Even Length Array**: Tests the method with an even-length array.
   - **Odd Length Array**: Tests the method with an odd-length array.
   - **Negative Values**: Tests the method with an array of negative values.
   - **Mixed Values**: Tests the method with an array of mixed positive and negative values.
   - **Single Element**: Tests the method with a single element array.
   - **Two Elements**: Tests the method with a two-element array.
   - **Boundary Values**: Tests the method with maximum and minimum integer values.
   - **All Equal Values**: Tests the method with all elements being the same.
   - **Empty Array**: Tests the method with an empty array to ensure it throws an `ArrayIndexOutOfBoundsException`.

Each test includes the `timeout=1000` parameter, and exceptions are thrown in the method declarations as required. The test cases aim to cover all conditions and boundary values as specified.