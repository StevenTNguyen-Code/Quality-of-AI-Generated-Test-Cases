Sure, here are the unit tests for the `Fibonacci` class in the `ds` package according to your requirements:

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class FibonacciTest {

    private Fibonacci fibonacci;

    @Before
    public void setUp() throws Exception {
        fibonacci = new Fibonacci();
    }

    @Test(timeout = 1000)
    public void testDefaultConstructor() throws Exception {
        assertNotNull(new Fibonacci());
    }

    @Test(timeout = 1000)
    public void testFibIterZero() throws Exception {
        assertEquals(0, Fibonacci.fibIter(0));
    }

    @Test(timeout = 1000)
    public void testFibIterOne() throws Exception {
        assertEquals(1, Fibonacci.fibIter(1));
    }

    @Test(timeout = 1000)
    public void testFibIterTwo() throws Exception {
        assertEquals(1, Fibonacci.fibIter(2));
    }

    @Test(timeout = 1000)
    public void testFibIterThree() throws Exception {
        assertEquals(2, Fibonacci.fibIter(3));
    }

    @Test(timeout = 1000)
    public void testFibIterFive() throws Exception {
        assertEquals(5, Fibonacci.fibIter(5));
    }

    @Test(timeout = 1000)
    public void testFibIterTen() throws Exception {
        assertEquals(55, Fibonacci.fibIter(10));
    }

    @Test(timeout = 1000)
    public void testFibIterNegative() throws Exception {
        // Assuming the function should return 0 for negative input as Fibonacci sequence is undefined for negative numbers
        assertEquals(0, Fibonacci.fibIter(-1));
    }

    @Test(timeout = 1000)
    public void testFibIterBoundary() throws Exception {
        // Test boundary values
        assertEquals(1, Fibonacci.fibIter(2));  // Boundary value at 2
        assertEquals(2, Fibonacci.fibIter(3));  // Boundary value at 3
    }
}
```

### Explanation:
1. **Imports**: Imported necessary JUnit classes.
2. **Setup**: Created a `setUp` method to initialize the `Fibonacci` object.
3. **Default Constructor Test**: Ensured the default constructor works.
4. **Test Cases**: Created test cases for various values of `n` including boundary values and negative values.
5. **Timeout**: Added `timeout=1000` to all test annotations.
6. **Assertions**: Used `assertEquals` to check the expected output of the `fibIter` method.

These tests cover all decisions in the `fibIter` method, including boundary values and both positive and negative inputs.