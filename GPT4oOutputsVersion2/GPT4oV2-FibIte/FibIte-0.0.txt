Sure, here are the unit tests for the `Fibonacci` class using JUnit 4 framework in Java 8:

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class FibonacciTest {

    private Fibonacci fibonacci;

    @Before
    public void setUp() {
        fibonacci = new Fibonacci();
    }

    @Test(timeout = 1000)
    public void testDefaultConstructor() throws Exception {
        assertNotNull(new Fibonacci());
    }

    @Test(timeout = 1000)
    public void testFibIterZero() throws Exception {
        assertEquals(0, Fibonacci.fibIter(0));
    }

    @Test(timeout = 1000)
    public void testFibIterOne() throws Exception {
        assertEquals(1, Fibonacci.fibIter(1));
    }

    @Test(timeout = 1000)
    public void testFibIterTwo() throws Exception {
        assertEquals(1, Fibonacci.fibIter(2));
    }

    @Test(timeout = 1000)
    public void testFibIterThree() throws Exception {
        assertEquals(2, Fibonacci.fibIter(3));
    }

    @Test(timeout = 1000)
    public void testFibIterFive() throws Exception {
        assertEquals(5, Fibonacci.fibIter(5));
    }

    @Test(timeout = 1000)
    public void testFibIterTen() throws Exception {
        assertEquals(55, Fibonacci.fibIter(10));
    }

    @Test(timeout = 1000)
    public void testFibIterNegative() throws Exception {
        assertEquals(0, Fibonacci.fibIter(-1));
    }

    @Test(timeout = 1000)
    public void testFibIterBoundary() throws Exception {
        assertEquals(1, Fibonacci.fibIter(1));
        assertEquals(1, Fibonacci.fibIter(2));
    }
}
```

### Explanation:
1. **Imports and Package**: The necessary imports and package declaration are included at the top.
2. **Setup Method**: The `setUp` method initializes the `Fibonacci` object before each test.
3. **Default Constructor Test**: The `testDefaultConstructor` method ensures that the default constructor works and creates a non-null object.
4. **Boundary and Functional Tests**: Each test method covers different scenarios:
   - `testFibIterZero`: Tests the Fibonacci of 0.
   - `testFibIterOne`: Tests the Fibonacci of 1.
   - `testFibIterTwo`: Tests the Fibonacci of 2.
   - `testFibIterThree`: Tests the Fibonacci of 3.
   - `testFibIterFive`: Tests the Fibonacci of 5.
   - `testFibIterTen`: Tests the Fibonacci of 10.
   - `testFibIterNegative`: Tests the Fibonacci of a negative number (assuming it should return 0).
   - `testFibIterBoundary`: Tests boundary values for 1 and 2.

Each test method includes the `timeout = 1000` parameter to ensure the test completes within 1000 milliseconds. The `assertEquals` method is used to check if the actual output matches the expected output.