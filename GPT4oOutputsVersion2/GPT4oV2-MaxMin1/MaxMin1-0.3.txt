Certainly! Below is the Java unit test code for the `MaxMin1` class using JUnit 4 framework. The tests cover all decisions, boundary values, and include necessary annotations and imports.

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class MaxMin1Test {

    private MaxMin1 maxMin1;

    @Before
    public void setUp() {
        maxMin1 = new MaxMin1();
    }

    @Test(timeout = 1000)
    public void testDefaultConstructor() throws Exception {
        assertNotNull("Default constructor should create an object", new MaxMin1());
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithPositiveValues() throws Exception {
        int[] input = {1, 2, 3, 4, 5};
        int[] expected = {5, 1};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals("Max and Min should be 5 and 1", expected, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithNegativeValues() throws Exception {
        int[] input = {-1, -2, -3, -4, -5};
        int[] expected = {-1, -5};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals("Max and Min should be -1 and -5", expected, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithMixedValues() throws Exception {
        int[] input = {-1, 2, -3, 4, -5};
        int[] expected = {4, -5};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals("Max and Min should be 4 and -5", expected, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithSingleElement() throws Exception {
        int[] input = {42};
        int[] expected = {42, 42};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals("Max and Min should be 42", expected, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithTwoElements() throws Exception {
        int[] input = {42, -42};
        int[] expected = {42, -42};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals("Max and Min should be 42 and -42", expected, result);
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithAllSameElements() throws Exception {
        int[] input = {7, 7, 7, 7, 7};
        int[] expected = {7, 7};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals("Max and Min should be 7", expected, result);
    }

    @Test(timeout = 1000, expected = ArrayIndexOutOfBoundsException.class)
    public void testMaxMin1WithEmptyArray() throws Exception {
        int[] input = {};
        MaxMin1.maxMin1(input, input.length);
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithBoundaryValues() throws Exception {
        int[] input = {Integer.MAX_VALUE, Integer.MIN_VALUE};
        int[] expected = {Integer.MAX_VALUE, Integer.MIN_VALUE};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals("Max and Min should be Integer.MAX_VALUE and Integer.MIN_VALUE", expected, result);
    }
}
```

### Explanation:
1. **Imports and Package**: The necessary imports and package declaration are included.
2. **Setup Method**: The `setUp` method initializes the `MaxMin1` object.
3. **Default Constructor Test**: Ensures the default constructor creates an object.
4. **Test Cases**: Various test cases cover:
   - Positive values
   - Negative values
   - Mixed values
   - Single element
   - Two elements
   - All same elements
   - Empty array (expected exception)
   - Boundary values (Integer.MAX_VALUE and Integer.MIN_VALUE)

Each test case is annotated with `@Test(timeout = 1000)` to ensure the test completes within the specified time. The test for an empty array is expected to throw an `ArrayIndexOutOfBoundsException`.