Sure, I can help you create unit tests for the `MaxMin1` class. Below is the Java code for the unit tests using JUnit 4 framework:

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class MaxMin1Test {

    private MaxMin1 maxMin1;

    @Before
    public void setUp() {
        maxMin1 = new MaxMin1();
    }

    @Test(timeout=1000)
    public void testMaxMin1WithPositiveValues() throws Exception {
        int[] input = {1, 2, 3, 4, 5};
        int[] expected = {5, 1};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout=1000)
    public void testMaxMin1WithNegativeValues() throws Exception {
        int[] input = {-1, -2, -3, -4, -5};
        int[] expected = {-1, -5};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout=1000)
    public void testMaxMin1WithMixedValues() throws Exception {
        int[] input = {-1, 2, -3, 4, -5};
        int[] expected = {4, -5};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout=1000)
    public void testMaxMin1WithSingleElement() throws Exception {
        int[] input = {42};
        int[] expected = {42, 42};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout=1000)
    public void testMaxMin1WithTwoElements() throws Exception {
        int[] input = {42, -42};
        int[] expected = {42, -42};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout=1000)
    public void testMaxMin1WithBoundaryValues() throws Exception {
        int[] input = {Integer.MAX_VALUE, Integer.MIN_VALUE};
        int[] expected = {Integer.MAX_VALUE, Integer.MIN_VALUE};
        int[] result = MaxMin1.maxMin1(input, input.length);
        assertArrayEquals(expected, result);
    }

    @Test(timeout=1000, expected=ArrayIndexOutOfBoundsException.class)
    public void testMaxMin1WithEmptyArray() throws Exception {
        int[] input = {};
        MaxMin1.maxMin1(input, input.length);
    }
}
```

### Explanation:
1. **Imports and Package**: The necessary imports and package declaration are included at the top.
2. **Setup Method**: The `setUp` method initializes the `MaxMin1` object before each test.
3. **Test Methods**:
   - **testMaxMin1WithPositiveValues**: Tests the method with an array of positive values.
   - **testMaxMin1WithNegativeValues**: Tests the method with an array of negative values.
   - **testMaxMin1WithMixedValues**: Tests the method with an array of mixed positive and negative values.
   - **testMaxMin1WithSingleElement**: Tests the method with an array containing a single element.
   - **testMaxMin1WithTwoElements**: Tests the method with an array containing two elements.
   - **testMaxMin1WithBoundaryValues**: Tests the method with boundary values (Integer.MAX_VALUE and Integer.MIN_VALUE).
   - **testMaxMin1WithEmptyArray**: Tests the method with an empty array and expects an `ArrayIndexOutOfBoundsException`.

Each test method includes the `timeout=1000` parameter to ensure the test completes within 1000 milliseconds. The `expected` parameter is used in the last test to check for an exception.