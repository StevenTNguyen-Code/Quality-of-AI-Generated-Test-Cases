Certainly! Below is the Java Unit Test code for the provided `MaxMin1` class, adhering to the specified requirements.

```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class MaxMin1Test {

    private MaxMin1 maxMin1;

    @Before
    public void setUp() {
        maxMin1 = new MaxMin1();
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithPositiveValues() throws Exception {
        int[] inputArray = {1, 3, 5, 7, 9};
        int n = inputArray.length;
        int[] result = MaxMin1.maxMin1(inputArray, n);
        assertEquals(9, result[0]);
        assertEquals(1, result[1]);
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithNegativeValues() throws Exception {
        int[] inputArray = {-1, -3, -5, -7, -9};
        int n = inputArray.length;
        int[] result = MaxMin1.maxMin1(inputArray, n);
        assertEquals(-1, result[0]);
        assertEquals(-9, result[1]);
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithMixedValues() throws Exception {
        int[] inputArray = {5, -3, 4, -1, 7};
        int n = inputArray.length;
        int[] result = MaxMin1.maxMin1(inputArray, n);
        assertEquals(7, result[0]);
        assertEquals(-3, result[1]);
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithSingleElement() throws Exception {
        int[] inputArray = {5};
        int n = inputArray.length;
        int[] result = MaxMin1.maxMin1(inputArray, n);
        assertEquals(5, result[0]);
        assertEquals(5, result[1]);
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithAllSameElements() throws Exception {
        int[] inputArray = {4, 4, 4, 4};
        int n = inputArray.length;
        int[] result = MaxMin1.maxMin1(inputArray, n);
        assertEquals(4, result[0]);
        assertEquals(4, result[1]);
    }

    @Test(timeout = 1000, expected = ArrayIndexOutOfBoundsException.class)
    public void testMaxMin1WithEmptyArray() throws Exception {
        int[] inputArray = {};
        int n = inputArray.length;
        MaxMin1.maxMin1(inputArray, n);
    }

    @Test(timeout = 1000)
    public void testDefaultConstructor() throws Exception {
        MaxMin1 maxMin1 = new MaxMin1();
        assertNotNull(maxMin1);
    }
}
```

### Explanation:

1. **Test for Positive Values:** Checks the `maxMin1` method with an array of positive integers.
2. **Test for Negative Values:** Checks the `maxMin1` method with an array of negative integers.
3. **Test for Mixed Values:** Checks the `maxMin1` method with an array of both positive and negative integers.
4. **Test for Single Element:** Checks the `maxMin1` method with an array of a single integer.
5. **Test for All Same Elements:** Checks the `maxMin1` method with an array where all elements are the same.
6. **Test for Empty Array:** Checks the `maxMin1` method with an empty array and expects an `ArrayIndexOutOfBoundsException`.
7. **Test for Default Constructor:** Ensures the default constructor works and the object is not null.

All tests include the `timeout=1000` parameter and are designed to cover various edge cases and boundary values. Each method in the `MaxMin1` class has at least one test case, including the constructor.