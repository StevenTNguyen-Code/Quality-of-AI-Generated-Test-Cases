```java
package ds;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class MaxMin1Test {

    private MaxMin1 maxMin1;

    @Before
    public void setUp() {
        maxMin1 = new MaxMin1();
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithPositiveValues() throws Exception {
        int[] input = {1, 2, 3, 4, 5};
        int[] expected = {5, 1};
        assertArrayEquals(expected, MaxMin1.maxMin1(input, input.length));
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithNegativeValues() throws Exception {
        int[] input = {-1, -2, -3, -4, -5};
        int[] expected = {-1, -5};
        assertArrayEquals(expected, MaxMin1.maxMin1(input, input.length));
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithMixedValues() throws Exception {
        int[] input = {-1, 2, -3, 4, -5};
        int[] expected = {4, -5};
        assertArrayEquals(expected, MaxMin1.maxMin1(input, input.length));
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithSingleValue() throws Exception {
        int[] input = {42};
        int[] expected = {42, 42};
        assertArrayEquals(expected, MaxMin1.maxMin1(input, input.length));
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithTwoValues() throws Exception {
        int[] input = {7, 3};
        int[] expected = {7, 3};
        assertArrayEquals(expected, MaxMin1.maxMin1(input, input.length));
    }

    @Test(timeout = 1000)
    public void testMaxMin1WithEqualValues() throws Exception {
        int[] input = {5, 5, 5};
        int[] expected = {5, 5};
        assertArrayEquals(expected, MaxMin1.maxMin1(input, input.length));
    }

    @Test(timeout = 1000, expected = ArrayIndexOutOfBoundsException.class)
    public void testMaxMin1WithEmptyArray() throws Exception {
        int[] input = {};
        MaxMin1.maxMin1(input, input.length);
    }

    // Boundary Test: Checks if the method can handle the maximum and minimum integer values
    @Test(timeout = 1000)
    public void testMaxMin1WithMaxMinIntValues() throws Exception {
        int[] input = {Integer.MAX_VALUE, Integer.MIN_VALUE};
        int[] expected = {Integer.MAX_VALUE, Integer.MIN_VALUE};
        assertArrayEquals(expected, MaxMin1.maxMin1(input, input.length));
    }

    // Boundary Test: Checks if the method can handle array with size of 1
    @Test(timeout = 1000)
    public void testMaxMin1WithArraySizeOne() throws Exception {
        int[] input = {0};
        int[] expected = {0, 0};
        assertArrayEquals(expected, MaxMin1.maxMin1(input, input.length));
    }

    // Default constructor test
    @Test(timeout = 1000)
    public void testDefaultConstructor() throws Exception {
        MaxMin1 maxMin = new MaxMin1();
        assertNotNull(maxMin);
    }
}
```

This set of unit tests for the `MaxMin1` class in Java 8 using the JUnit 4 framework covers the following criteria:

1. Tests with positive, negative, and mixed values.
2. Tests with boundary values like maximum and minimum integers.
3. Tests for arrays with different sizes including single-element and empty arrays.
4. Tests for handling exceptions.
5. Tests for the default constructor.
6. All tests include a timeout of 1000 milliseconds.

The tests are designed to cover all decision points and conditional expressions in the `maxMin1` method, ensuring complete coverage.